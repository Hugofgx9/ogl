{"version":3,"file":"ogl.min.js","sources":["../src/math/functions/Vec3Func.js","../src/math/Vec3.js","../src/core/Geometry.js","../src/core/Program.js","../src/core/Renderer.js","../src/math/functions/Vec4Func.js","../src/math/functions/QuatFunc.js","../src/math/Quat.js","../src/math/functions/Mat4Func.js","../src/math/Mat4.js","../src/math/functions/EulerFunc.js","../src/math/Euler.js","../src/core/Transform.js","../src/core/Camera.js","../src/math/functions/Mat3Func.js","../src/math/Mat3.js","../src/core/Mesh.js","../src/core/Texture.js","../src/core/RenderTarget.js","../src/math/functions/ColorFunc.js","../src/math/Color.js","../src/math/functions/Vec2Func.js","../src/math/Vec2.js","../src/math/Vec4.js","../src/extras/Plane.js","../src/extras/Box.js","../src/extras/Sphere.js","../src/extras/Cylinder.js","../src/extras/Triangle.js","../src/extras/Torus.js","../src/extras/Orbit.js","../src/extras/Raycast.js","../src/extras/Curve.js","../src/extras/Post.js","../src/extras/Animation.js","../src/extras/Skin.js","../src/extras/NormalProgram.js","../src/extras/Flowmap.js","../src/extras/GPGPU.js","../src/extras/Polyline.js","../src/extras/Shadow.js","../src/extras/KTXTexture.js","../src/extras/TextureLoader.js","../src/extras/GLTFAnimation.js","../src/extras/GLTFSkin.js","../src/extras/GLTFLoader.js","../src/extras/Text.js"],"sourcesContent":["const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n// TODO: when would I disableVertexAttribArray ?\n// TODO: use offset/stride if exists\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n\n        if (!attr.buffer) {\n            attr.buffer = this.gl.createBuffer();\n\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        this.gl.bufferData(attr.target, attr.data, this.gl.STATIC_DRAW);\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * 2,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const offset = attr.offset || 0;\n        const stride = attr.stride || attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = offset, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const offset = attr.offset || 0;\n        const stride = attr.stride || attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = offset, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.gl.viewport(0, 0, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = new Mat4();\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left,\n        right = this.right,\n        bottom = this.bottom,\n        top = this.top,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(node.worldMatrix);\n\n        const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n","// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n","// TODO: multi target rendering\n// TODO: test stencil and depth\n// TODO: destroy\n// TODO: blit on resize?\nimport { Texture } from './Texture.js';\n\nexport class RenderTarget {\n    constructor(\n        gl,\n        {\n            width = gl.canvas.width,\n            height = gl.canvas.height,\n            target = gl.FRAMEBUFFER,\n            color = 1, // number of color attachments\n            depth = true,\n            stencil = false,\n            depthTexture = false, // note - stencil breaks\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = minFilter,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            unpackAlignment,\n            premultiplyAlpha,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.buffer = this.gl.createFramebuffer();\n        this.target = target;\n        this.gl.bindFramebuffer(this.target, this.buffer);\n\n        this.textures = [];\n        const drawBuffers = [];\n\n        // create and attach required num of color textures\n        for (let i = 0; i < color; i++) {\n            this.textures.push(\n                new Texture(gl, {\n                    width,\n                    height,\n                    wrapS,\n                    wrapT,\n                    minFilter,\n                    magFilter,\n                    type,\n                    format,\n                    internalFormat,\n                    unpackAlignment,\n                    premultiplyAlpha,\n                    flipY: false,\n                    generateMipmaps: false,\n                })\n            );\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        // For multi-render targets shader access\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n        // alias for majority of use cases\n        this.texture = this.textures[0];\n\n        // note depth textures break stencil - so can't use together\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n            this.depthTexture = new Texture(gl, {\n                width,\n                height,\n                minFilter: this.gl.NEAREST,\n                magFilter: this.gl.NEAREST,\n                format: this.gl.DEPTH_COMPONENT,\n                internalFormat: gl.renderer.isWebgl2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n                type: this.gl.UNSIGNED_INT,\n            });\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            // Render buffers\n            if (depth && !stencil) {\n                this.depthBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n            }\n\n            if (stencil && !depth) {\n                this.stencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n            }\n\n            if (depth && stencil) {\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n            }\n        }\n\n        this.gl.bindFramebuffer(this.target, null);\n    }\n}\n","const NAMES = {\n    black: '#000000',\n    white: '#ffffff',\n    red: '#ff0000',\n    green: '#00ff00',\n    blue: '#0000ff',\n    fuchsia: '#ff00ff',\n    cyan: '#00ffff',\n    yellow: '#ffff00',\n    orange: '#ff8000',\n};\n\nexport function hexToRGB(hex) {\n    if (hex.length === 4) hex = hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];\n    const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (!rgb) console.warn(`Unable to convert hex string ${hex} to rgb values`);\n    return [parseInt(rgb[1], 16) / 255, parseInt(rgb[2], 16) / 255, parseInt(rgb[3], 16) / 255];\n}\n\nexport function numberToRGB(num) {\n    num = parseInt(num);\n    return [((num >> 16) & 255) / 255, ((num >> 8) & 255) / 255, (num & 255) / 255];\n}\n\nexport function parseColor(color) {\n    // Empty\n    if (color === undefined) return [0, 0, 0];\n\n    // Decimal\n    if (arguments.length === 3) return arguments;\n\n    // Number\n    if (!isNaN(color)) return numberToRGB(color);\n\n    // Hex\n    if (color[0] === '#') return hexToRGB(color);\n\n    // Names\n    if (NAMES[color.toLowerCase()]) return hexToRGB(NAMES[color.toLowerCase()]);\n\n    console.warn('Color format not recognised');\n    return [0, 0, 0];\n}\n","import * as ColorFunc from './functions/ColorFunc.js';\n\n// Color stored as an array of RGB decimal values (between 0 > 1)\n// Constructor and set method accept following formats:\n// new Color() - Empty (defaults to black)\n// new Color([0.2, 0.4, 1.0]) - Decimal Array (or another Color instance)\n// new Color(0.7, 0.0, 0.1) - Decimal RGB values\n// new Color('#ff0000') - Hex string\n// new Color('#ccc') - Short-hand Hex string\n// new Color(0x4f27e8) - Number\n// new Color('red') - Color name string (short list in ColorFunc.js)\n\nexport class Color extends Array {\n    constructor(color) {\n        if (Array.isArray(color)) return super(...color);\n        return super(...ColorFunc.parseColor(...arguments));\n    }\n\n    get r() {\n        return this[0];\n    }\n\n    get g() {\n        return this[1];\n    }\n\n    get b() {\n        return this[2];\n    }\n\n    set r(v) {\n        this[0] = v;\n    }\n\n    set g(v) {\n        this[1] = v;\n    }\n\n    set b(v) {\n        this[2] = v;\n    }\n\n    set(color) {\n        if (Array.isArray(color)) return this.copy(color);\n        return this.copy(ColorFunc.parseColor(...arguments));\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        return this;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n","import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n        return this;\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n","import * as Vec4Func from './functions/Vec4Func.js';\n\nexport class Vec4 extends Array {\n    constructor(x = 0, y = x, z = x, w = x) {\n        super(x, y, z, w);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set w(v) {\n        this[3] = v;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        Vec4Func.set(this, x, y, z, w);\n        return this;\n    }\n\n    copy(v) {\n        Vec4Func.copy(this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec4Func.normalize(this, this);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Plane extends Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\nimport { Plane } from './Plane.js';\n\nexport class Box extends Geometry {\n    constructor(gl, { width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n        const dSegs = depthSegments;\n\n        const num = (wSegs + 1) * (hSegs + 1) * 2 + (wSegs + 1) * (dSegs + 1) * 2 + (hSegs + 1) * (dSegs + 1) * 2;\n        const numIndices = (wSegs * hSegs * 2 + wSegs * dSegs * 2 + hSegs * dSegs * 2) * 6;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let ii = 0;\n\n        // left, right\n        Plane.buildPlane(position, normal, uv, index, depth, height, width, dSegs, hSegs, 2, 1, 0, -1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        Plane.buildPlane(position, normal, uv, index, depth, height, -width, dSegs, hSegs, 2, 1, 0, 1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        // top, bottom\n        Plane.buildPlane(position, normal, uv, index, width, depth, height, dSegs, wSegs, 0, 2, 1, 1, 1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        Plane.buildPlane(position, normal, uv, index, width, depth, -height, dSegs, wSegs, 0, 2, 1, 1, -1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        // front, back\n        Plane.buildPlane(position, normal, uv, index, width, height, -depth, wSegs, hSegs, 0, 1, 2, -1, -1, i, ii);\n        i += (wSegs + 1) * (hSegs + 1);\n        ii += wSegs * hSegs;\n\n        Plane.buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, 0, 1, 2, 1, -1, i, ii);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nexport class Sphere extends Geometry {\n    constructor(\n        gl,\n        {\n            radius = 0.5,\n            widthSegments = 16,\n            heightSegments = Math.ceil(widthSegments * 0.5),\n            phiStart = 0,\n            phiLength = Math.PI * 2,\n            thetaStart = 0,\n            thetaLength = Math.PI,\n            attributes = {},\n        } = {}\n    ) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n        const pStart = phiStart;\n        const pLength = phiLength;\n        const tStart = thetaStart;\n        const tLength = thetaLength;\n\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let iv = 0;\n        let ii = 0;\n        let te = tStart + tLength;\n        const grid = [];\n\n        let n = new Vec3();\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let vRow = [];\n            let v = iy / hSegs;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let u = ix / wSegs;\n                let x = -radius * Math.cos(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n                let y = radius * Math.cos(tStart + v * tLength);\n                let z = radius * Math.sin(pStart + u * pLength) * Math.sin(tStart + v * tLength);\n\n                position[i * 3] = x;\n                position[i * 3 + 1] = y;\n                position[i * 3 + 2] = z;\n\n                n.set(x, y, z).normalize();\n                normal[i * 3] = n.x;\n                normal[i * 3 + 1] = n.y;\n                normal[i * 3 + 2] = n.z;\n\n                uv[i * 2] = u;\n                uv[i * 2 + 1] = 1 - v;\n\n                vRow.push(iv++);\n            }\n\n            grid.push(vRow);\n        }\n\n        for (let iy = 0; iy < hSegs; iy++) {\n            for (let ix = 0; ix < wSegs; ix++) {\n                let a = grid[iy][ix + 1];\n                let b = grid[iy][ix];\n                let c = grid[iy + 1][ix];\n                let d = grid[iy + 1][ix + 1];\n\n                if (iy !== 0 || tStart > 0) {\n                    index[ii * 3] = a;\n                    index[ii * 3 + 1] = b;\n                    index[ii * 3 + 2] = d;\n                    ii++;\n                }\n                if (iy !== hSegs - 1 || te < Math.PI) {\n                    index[ii * 3] = b;\n                    index[ii * 3 + 1] = c;\n                    index[ii * 3 + 2] = d;\n                    ii++;\n                }\n            }\n        }\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nexport class Cylinder extends Geometry {\n    constructor(\n        gl,\n        {\n            radiusTop = 0.5,\n            radiusBottom = 0.5,\n            height = 1,\n            radialSegments = 8,\n            heightSegments = 1,\n            openEnded = false,\n            thetaStart = 0,\n            thetaLength = Math.PI * 2,\n            attributes = {},\n        } = {}\n    ) {\n        const rSegs = radialSegments;\n        const hSegs = heightSegments;\n        const tStart = thetaStart;\n        const tLength = thetaLength;\n\n        const numCaps = openEnded ? 0 : radiusBottom && radiusTop ? 2 : 1;\n        const num = (rSegs + 1) * (hSegs + 1 + numCaps) + numCaps;\n        const numIndices = rSegs * hSegs * 6 + numCaps * rSegs * 3;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let ii = 0;\n        const indexArray = [];\n\n        addHeight();\n        if (!openEnded) {\n            if (radiusTop) addCap(true);\n            if (radiusBottom) addCap(false);\n        }\n\n        function addHeight() {\n            let x, y;\n            const n = new Vec3();\n            const slope = (radiusBottom - radiusTop) / height;\n\n            for (y = 0; y <= hSegs; y++) {\n                const indexRow = [];\n                const v = y / hSegs;\n\n                const r = v * (radiusBottom - radiusTop) + radiusTop;\n                for (x = 0; x <= rSegs; x++) {\n                    const u = x / rSegs;\n                    const theta = u * tLength + tStart;\n                    const sinTheta = Math.sin(theta);\n                    const cosTheta = Math.cos(theta);\n\n                    position.set([r * sinTheta, (0.5 - v) * height, r * cosTheta], i * 3);\n                    n.set(sinTheta, slope, cosTheta).normalize();\n                    normal.set([n.x, n.y, n.z], i * 3);\n                    uv.set([u, 1 - v], i * 2);\n                    indexRow.push(i++);\n                }\n                indexArray.push(indexRow);\n            }\n\n            for (x = 0; x < rSegs; x++) {\n                for (y = 0; y < hSegs; y++) {\n                    const a = indexArray[y][x];\n                    const b = indexArray[y + 1][x];\n                    const c = indexArray[y + 1][x + 1];\n                    const d = indexArray[y][x + 1];\n\n                    index.set([a, b, d, b, c, d], ii * 3);\n                    ii += 2;\n                }\n            }\n        }\n\n        function addCap(isTop) {\n            let x;\n            const r = isTop === true ? radiusTop : radiusBottom;\n            const sign = isTop === true ? 1 : -1;\n\n            const centerIndex = i;\n            position.set([0, 0.5 * height * sign, 0], i * 3);\n            normal.set([0, sign, 0], i * 3);\n            uv.set([0.5, 0.5], i * 2);\n            i++;\n\n            for (x = 0; x <= rSegs; x++) {\n                const u = x / rSegs;\n                const theta = u * tLength + tStart;\n                const cosTheta = Math.cos(theta);\n                const sinTheta = Math.sin(theta);\n\n                position.set([r * sinTheta, 0.5 * height * sign, r * cosTheta], i * 3);\n                normal.set([0, sign, 0], i * 3);\n                uv.set([cosTheta * 0.5 + 0.5, sinTheta * 0.5 * sign + 0.5], i * 2);\n                i++;\n            }\n\n            for (x = 0; x < rSegs; x++) {\n                const j = centerIndex + x + 1;\n                if (isTop) {\n                    index.set([j, j + 1, centerIndex], ii * 3);\n                } else {\n                    index.set([j + 1, j, centerIndex], ii * 3);\n                }\n                ii++;\n            }\n        }\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Triangle extends Geometry {\n    constructor(gl, { attributes = {} } = {}) {\n        Object.assign(attributes, {\n            position: { size: 2, data: new Float32Array([-1, -1, 3, -1, -1, 3]) },\n            uv: { size: 2, data: new Float32Array([0, 0, 2, 0, 0, 2]) },\n        });\n\n        super(gl, attributes);\n    }\n}\n","// https://github.com/mrdoob/three.js/blob/master/src/geometries/TorusGeometry.js\n\nimport { Geometry } from '../core/Geometry.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nexport class Torus extends Geometry {\n    constructor(gl, { radius = 0.5, tube = 0.2, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2, attributes = {} } = {}) {\n        const num = (radialSegments + 1) * (tubularSegments + 1);\n        const numIndices = radialSegments * tubularSegments * 6;\n\n        const vertices = new Float32Array(num * 3);\n        const normals = new Float32Array(num * 3);\n        const uvs = new Float32Array(num * 2);\n        const indices = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        const center = new Vec3();\n        const vertex = new Vec3();\n        const normal = new Vec3();\n\n        // generate vertices, normals and uvs\n        let idx = 0;\n        for (let j = 0; j <= radialSegments; j++) {\n            for (let i = 0; i <= tubularSegments; i++, idx++) {\n                const u = (i / tubularSegments) * arc;\n                const v = (j / radialSegments) * Math.PI * 2;\n\n                // vertex\n                vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n                vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n                vertex.z = tube * Math.sin(v);\n\n                vertices.set([vertex.x, vertex.y, vertex.z], idx * 3);\n\n                // normal\n                center.x = radius * Math.cos(u);\n                center.y = radius * Math.sin(u);\n                normal.sub(vertex, center).normalize();\n\n                normals.set([normal.x, normal.y, normal.z], idx * 3);\n\n                // uv\n                uvs.set([i / tubularSegments, j / radialSegments], idx * 2);\n            }\n        }\n\n        // generate indices\n        idx = 0;\n        for (let j = 1; j <= radialSegments; j++) {\n            for (let i = 1; i <= tubularSegments; i++, idx++) {\n                // indices\n                const a = (tubularSegments + 1) * j + i - 1;\n                const b = (tubularSegments + 1) * (j - 1) + i - 1;\n                const c = (tubularSegments + 1) * (j - 1) + i;\n                const d = (tubularSegments + 1) * j + i;\n\n                // faces\n                indices.set([a, b, d, b, c, d], idx * 6);\n            }\n        }\n\n        Object.assign(attributes, {\n            position: { size: 3, data: vertices },\n            normal: { size: 3, data: normals },\n            uv: { size: 2, data: uvs },\n            index: { data: indices },\n        });\n\n        super(gl, attributes);\n    }\n}\n","// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\n// TODO: abstract event handlers so can be fed from other sources\n// TODO: make scroll zoom more accurate than just >/< zero\n// TODO: be able to pass in new camera position\n\nimport { Vec3 } from '../math/Vec3.js';\nimport { Vec2 } from '../math/Vec2.js';\n\nconst STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, DOLLY_PAN: 3 };\nconst tempVec3 = new Vec3();\nconst tempVec2a = new Vec2();\nconst tempVec2b = new Vec2();\n\nexport function Orbit(\n    object,\n    {\n        element = document,\n        enabled = true,\n        target = new Vec3(),\n        ease = 0.25,\n        inertia = 0.85,\n        enableRotate = true,\n        rotateSpeed = 0.1,\n        autoRotate = false,\n        autoRotateSpeed = 1.0,\n        enableZoom = true,\n        zoomSpeed = 1,\n        zoomStyle = 'dolly',\n        enablePan = true,\n        panSpeed = 0.1,\n        minPolarAngle = 0,\n        maxPolarAngle = Math.PI,\n        minAzimuthAngle = -Infinity,\n        maxAzimuthAngle = Infinity,\n        minDistance = 0,\n        maxDistance = Infinity,\n    } = {}\n) {\n    this.enabled = enabled;\n    this.target = target;\n    this.zoomStyle = zoomStyle;\n\n    // Catch attempts to disable - set to 1 so has no effect\n    ease = ease || 1;\n    inertia = inertia || 0;\n\n    this.minDistance = minDistance;\n    this.maxDistance = maxDistance;\n\n    // current position in sphericalTarget coordinates\n    const sphericalDelta = { radius: 1, phi: 0, theta: 0 };\n    const sphericalTarget = { radius: 1, phi: 0, theta: 0 };\n    const spherical = { radius: 1, phi: 0, theta: 0 };\n    const panDelta = new Vec3();\n\n    // Grab initial position values\n    const offset = new Vec3();\n    offset.copy(object.position).sub(this.target);\n    spherical.radius = sphericalTarget.radius = offset.distance();\n    spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n    spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n\n    this.offset = offset;\n\n    this.update = () => {\n        if (autoRotate) {\n            handleAutoRotate();\n        }\n\n        // apply delta\n        sphericalTarget.radius *= sphericalDelta.radius;\n        sphericalTarget.theta += sphericalDelta.theta;\n        sphericalTarget.phi += sphericalDelta.phi;\n\n        // apply boundaries\n        sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\n        sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\n        sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius));\n\n        // ease values\n        spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\n        spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\n        spherical.radius += (sphericalTarget.radius - spherical.radius) * ease;\n\n        // apply pan to target. As offset is relative to target, it also shifts\n        this.target.add(panDelta);\n\n        // apply rotation to offset\n        let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\n        offset.x = sinPhiRadius * Math.sin(spherical.theta);\n        offset.y = spherical.radius * Math.cos(spherical.phi);\n        offset.z = sinPhiRadius * Math.cos(spherical.theta);\n\n        // Apply updated values to object\n        object.position.copy(this.target).add(offset);\n        object.lookAt(this.target);\n\n        // Apply inertia to values\n        sphericalDelta.theta *= inertia;\n        sphericalDelta.phi *= inertia;\n        panDelta.multiply(inertia);\n\n        // Reset scale every frame to avoid applying scale multiple times\n        sphericalDelta.radius = 1;\n    };\n\n    // Updates internals with new position\n    this.forcePosition = () => {\n        offset.copy(object.position).sub(this.target);\n        spherical.radius = sphericalTarget.radius = offset.distance();\n        spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n        spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n        object.lookAt(this.target);\n    };\n\n    // Everything below here just updates panDelta and sphericalDelta\n    // Using those two objects' values, the orbit is calculated\n\n    const rotateStart = new Vec2();\n    const panStart = new Vec2();\n    const dollyStart = new Vec2();\n\n    let state = STATE.NONE;\n    this.mouseButtons = { ORBIT: 0, ZOOM: 1, PAN: 2 };\n\n    function getZoomScale() {\n        return Math.pow(0.95, zoomSpeed);\n    }\n\n    function panLeft(distance, m) {\n        tempVec3.set(m[0], m[1], m[2]);\n        tempVec3.multiply(-distance);\n        panDelta.add(tempVec3);\n    }\n\n    function panUp(distance, m) {\n        tempVec3.set(m[4], m[5], m[6]);\n        tempVec3.multiply(distance);\n        panDelta.add(tempVec3);\n    }\n\n    const pan = (deltaX, deltaY) => {\n        let el = element === document ? document.body : element;\n        tempVec3.copy(object.position).sub(this.target);\n        let targetDistance = tempVec3.distance();\n        targetDistance *= Math.tan((((object.fov || 45) / 2) * Math.PI) / 180.0);\n        panLeft((2 * deltaX * targetDistance) / el.clientHeight, object.matrix);\n        panUp((2 * deltaY * targetDistance) / el.clientHeight, object.matrix);\n    };\n\n    const dolly = (dollyScale) => {\n        if (this.zoomStyle === 'dolly') sphericalDelta.radius /= dollyScale;\n        else {\n            object.fov /= dollyScale;\n            if (object.type === 'orthographic') object.orthographic();\n            else object.perspective();\n        }\n    };\n\n    function handleAutoRotate() {\n        const angle = ((2 * Math.PI) / 60 / 60) * autoRotateSpeed;\n        sphericalDelta.theta -= angle;\n    }\n\n    function handleMoveRotate(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\n        let el = element === document ? document.body : element;\n        sphericalDelta.theta -= (2 * Math.PI * tempVec2b.x) / el.clientHeight;\n        sphericalDelta.phi -= (2 * Math.PI * tempVec2b.y) / el.clientHeight;\n        rotateStart.copy(tempVec2a);\n    }\n\n    function handleMouseMoveDolly(e) {\n        tempVec2a.set(e.clientX, e.clientY);\n        tempVec2b.sub(tempVec2a, dollyStart);\n        if (tempVec2b.y > 0) {\n            dolly(getZoomScale());\n        } else if (tempVec2b.y < 0) {\n            dolly(1 / getZoomScale());\n        }\n        dollyStart.copy(tempVec2a);\n    }\n\n    function handleMovePan(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\n        pan(tempVec2b.x, tempVec2b.y);\n        panStart.copy(tempVec2a);\n    }\n\n    function handleTouchStartDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            dollyStart.set(0, distance);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            panStart.set(x, y);\n        }\n    }\n\n    function handleTouchMoveDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            tempVec2a.set(0, distance);\n            tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\n            dolly(tempVec2b.y);\n            dollyStart.copy(tempVec2a);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            handleMovePan(x, y);\n        }\n    }\n\n    const onMouseDown = (e) => {\n        if (!this.enabled) return;\n\n        switch (e.button) {\n            case this.mouseButtons.ORBIT:\n                if (enableRotate === false) return;\n                rotateStart.set(e.clientX, e.clientY);\n                state = STATE.ROTATE;\n                break;\n            case this.mouseButtons.ZOOM:\n                if (enableZoom === false) return;\n                dollyStart.set(e.clientX, e.clientY);\n                state = STATE.DOLLY;\n                break;\n            case this.mouseButtons.PAN:\n                if (enablePan === false) return;\n                panStart.set(e.clientX, e.clientY);\n                state = STATE.PAN;\n                break;\n        }\n\n        if (state !== STATE.NONE) {\n            window.addEventListener('mousemove', onMouseMove, false);\n            window.addEventListener('mouseup', onMouseUp, false);\n        }\n    };\n\n    const onMouseMove = (e) => {\n        if (!this.enabled) return;\n\n        switch (state) {\n            case STATE.ROTATE:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.clientX, e.clientY);\n                break;\n            case STATE.DOLLY:\n                if (enableZoom === false) return;\n                handleMouseMoveDolly(e);\n                break;\n            case STATE.PAN:\n                if (enablePan === false) return;\n                handleMovePan(e.clientX, e.clientY);\n                break;\n        }\n    };\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onMouseMove, false);\n        window.removeEventListener('mouseup', onMouseUp, false);\n        state = STATE.NONE;\n    };\n\n    const onMouseWheel = (e) => {\n        if (!this.enabled || !enableZoom || (state !== STATE.NONE && state !== STATE.ROTATE)) return;\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.deltaY < 0) {\n            dolly(1 / getZoomScale());\n        } else if (e.deltaY > 0) {\n            dolly(getZoomScale());\n        }\n    };\n\n    const onTouchStart = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\n                state = STATE.ROTATE;\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchStartDollyPan(e);\n                state = STATE.DOLLY_PAN;\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchMove = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n        e.stopPropagation();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchMoveDollyPan(e);\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchEnd = () => {\n        if (!this.enabled) return;\n        state = STATE.NONE;\n    };\n\n    const onContextMenu = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n    };\n\n    function addHandlers() {\n        element.addEventListener('contextmenu', onContextMenu, false);\n        element.addEventListener('mousedown', onMouseDown, false);\n        element.addEventListener('wheel', onMouseWheel, { passive: false });\n        element.addEventListener('touchstart', onTouchStart, { passive: false });\n        element.addEventListener('touchend', onTouchEnd, false);\n        element.addEventListener('touchmove', onTouchMove, { passive: false });\n    }\n\n    this.remove = function () {\n        element.removeEventListener('contextmenu', onContextMenu);\n        element.removeEventListener('mousedown', onMouseDown);\n        element.removeEventListener('wheel', onMouseWheel);\n        element.removeEventListener('touchstart', onTouchStart);\n        element.removeEventListener('touchend', onTouchEnd);\n        element.removeEventListener('touchmove', onTouchMove);\n        window.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    addHandlers();\n}\n","// TODO: barycentric code shouldn't be here, but where?\n// TODO: SphereCast?\n\nimport { Vec2 } from '../math/Vec2.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nconst tempVec2a = new Vec2();\nconst tempVec2b = new Vec2();\nconst tempVec2c = new Vec2();\n\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\nconst tempVec3c = new Vec3();\nconst tempVec3d = new Vec3();\nconst tempVec3e = new Vec3();\nconst tempVec3f = new Vec3();\nconst tempVec3g = new Vec3();\nconst tempVec3h = new Vec3();\nconst tempVec3i = new Vec3();\nconst tempVec3j = new Vec3();\nconst tempVec3k = new Vec3();\n\nconst tempMat4 = new Mat4();\n\nexport class Raycast {\n    constructor() {\n        this.origin = new Vec3();\n        this.direction = new Vec3();\n    }\n\n    // Set ray from mouse unprojection\n    castMouse(camera, mouse = [0, 0]) {\n        if (camera.type === 'orthographic') {\n            // Set origin\n            // Since camera is orthographic, origin is not the camera position\n            const { left, right, bottom, top, zoom } = camera;\n            const x = left / zoom + ((right - left) / zoom) * (mouse[0] * 0.5 + 0.5);\n            const y = bottom / zoom + ((top - bottom) / zoom) * (mouse[1] * 0.5 + 0.5);\n            this.origin.set(x, y, 0);\n            this.origin.applyMatrix4(camera.worldMatrix);\n\n            // Set direction\n            // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\n            this.direction.x = -camera.worldMatrix[8];\n            this.direction.y = -camera.worldMatrix[9];\n            this.direction.z = -camera.worldMatrix[10];\n        } else {\n            // Set origin\n            camera.worldMatrix.getTranslation(this.origin);\n\n            // Set direction\n            this.direction.set(mouse[0], mouse[1], 0.5);\n            camera.unproject(this.direction);\n            this.direction.sub(this.origin).normalize();\n        }\n    }\n\n    intersectBounds(meshes, { maxDistance, output = [] } = {}) {\n        if (!Array.isArray(meshes)) meshes = [meshes];\n\n        const invWorldMat4 = tempMat4;\n        const origin = tempVec3a;\n        const direction = tempVec3b;\n\n        const hits = output;\n        hits.length = 0;\n\n        meshes.forEach((mesh) => {\n            // Create bounds\n            if (!mesh.geometry.bounds || mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere();\n            const bounds = mesh.geometry.bounds;\n            invWorldMat4.inverse(mesh.worldMatrix);\n\n            // Get max distance locally\n            let localMaxDistance;\n            if (maxDistance) {\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n                localMaxDistance = maxDistance * direction.len();\n            }\n\n            // Take world space ray and make it object space to align with bounding box\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\n            direction.copy(this.direction).transformDirection(invWorldMat4);\n\n            // Break out early if bounds too far away from origin\n            if (maxDistance) {\n                if (origin.distance(bounds.center) - bounds.radius > localMaxDistance) return;\n            }\n\n            let localDistance = 0;\n\n            // Check origin isn't inside bounds before testing intersection\n            if (mesh.geometry.raycast === 'sphere') {\n                if (origin.distance(bounds.center) > bounds.radius) {\n                    localDistance = this.intersectSphere(bounds, origin, direction);\n                    if (!localDistance) return;\n                }\n            } else {\n                if (\n                    origin.x < bounds.min.x ||\n                    origin.x > bounds.max.x ||\n                    origin.y < bounds.min.y ||\n                    origin.y > bounds.max.y ||\n                    origin.z < bounds.min.z ||\n                    origin.z > bounds.max.z\n                ) {\n                    localDistance = this.intersectBox(bounds, origin, direction);\n                    if (!localDistance) return;\n                }\n            }\n\n            if (maxDistance && localDistance > localMaxDistance) return;\n\n            // Create object on mesh to avoid generating lots of objects\n            if (!mesh.hit) mesh.hit = { localPoint: new Vec3(), point: new Vec3() };\n\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n            hits.push(mesh);\n        });\n\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\n        return hits;\n    }\n\n    intersectMeshes(meshes, { cullFace = true, maxDistance, includeUV = true, includeNormal = true, output = [] } = {}) {\n        // Test bounds first before testing geometry\n        const hits = this.intersectBounds(meshes, { maxDistance, output });\n        if (!hits.length) return hits;\n\n        const invWorldMat4 = tempMat4;\n        const origin = tempVec3a;\n        const direction = tempVec3b;\n        const a = tempVec3c;\n        const b = tempVec3d;\n        const c = tempVec3e;\n        const closestFaceNormal = tempVec3f;\n        const faceNormal = tempVec3g;\n        const barycoord = tempVec3h;\n        const uvA = tempVec2a;\n        const uvB = tempVec2b;\n        const uvC = tempVec2c;\n\n        for (let i = hits.length - 1; i >= 0; i--) {\n            const mesh = hits[i];\n            invWorldMat4.inverse(mesh.worldMatrix);\n\n            // Get max distance locally\n            let localMaxDistance;\n            if (maxDistance) {\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n                localMaxDistance = maxDistance * direction.len();\n            }\n\n            // Take world space ray and make it object space to align with bounding box\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\n            direction.copy(this.direction).transformDirection(invWorldMat4);\n\n            let localDistance = 0;\n            let closestA, closestB, closestC;\n\n            const geometry = mesh.geometry;\n            const attributes = geometry.attributes;\n            const index = attributes.index;\n\n            const start = Math.max(0, geometry.drawRange.start);\n            const end = Math.min(index ? index.count : attributes.position.count, geometry.drawRange.start + geometry.drawRange.count);\n\n            for (let j = start; j < end; j += 3) {\n                // Position attribute indices for each triangle\n                const ai = index ? index.data[j] : j;\n                const bi = index ? index.data[j + 1] : j + 1;\n                const ci = index ? index.data[j + 2] : j + 2;\n\n                a.fromArray(attributes.position.data, ai * 3);\n                b.fromArray(attributes.position.data, bi * 3);\n                c.fromArray(attributes.position.data, ci * 3);\n\n                const distance = this.intersectTriangle(a, b, c, cullFace, origin, direction, faceNormal);\n                if (!distance) continue;\n\n                // Too far away\n                if (maxDistance && distance > localMaxDistance) continue;\n\n                if (!localDistance || distance < localDistance) {\n                    localDistance = distance;\n                    closestA = ai;\n                    closestB = bi;\n                    closestC = ci;\n                    closestFaceNormal.copy(faceNormal);\n                }\n            }\n\n            if (!localDistance) hits.splice(i, 1);\n\n            // Update hit values from bounds-test\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n            // Add unique hit objects on mesh to avoid generating lots of objects\n            if (!mesh.hit.faceNormal) {\n                mesh.hit.localFaceNormal = new Vec3();\n                mesh.hit.faceNormal = new Vec3();\n                mesh.hit.uv = new Vec2();\n                mesh.hit.localNormal = new Vec3();\n                mesh.hit.normal = new Vec3();\n            }\n\n            // Add face normal data which is already computed\n            mesh.hit.localFaceNormal.copy(closestFaceNormal);\n            mesh.hit.faceNormal.copy(mesh.hit.localFaceNormal).transformDirection(mesh.worldMatrix);\n\n            // Optional data, opt out to optimise a bit if necessary\n            if (includeUV || includeNormal) {\n                // Calculate barycoords to find uv values at hit point\n                a.fromArray(attributes.position.data, closestA * 3);\n                b.fromArray(attributes.position.data, closestB * 3);\n                c.fromArray(attributes.position.data, closestC * 3);\n                this.getBarycoord(mesh.hit.localPoint, a, b, c, barycoord);\n            }\n\n            if (includeUV && attributes.uv) {\n                uvA.fromArray(attributes.uv.data, closestA * 2);\n                uvB.fromArray(attributes.uv.data, closestB * 2);\n                uvC.fromArray(attributes.uv.data, closestC * 2);\n                mesh.hit.uv.set(\n                    uvA.x * barycoord.x + uvB.x * barycoord.y + uvC.x * barycoord.z,\n                    uvA.y * barycoord.x + uvB.y * barycoord.y + uvC.y * barycoord.z\n                );\n            }\n\n            if (includeNormal && attributes.normal) {\n                a.fromArray(attributes.normal.data, closestA * 3);\n                b.fromArray(attributes.normal.data, closestB * 3);\n                c.fromArray(attributes.normal.data, closestC * 3);\n                mesh.hit.localNormal.set(\n                    a.x * barycoord.x + b.x * barycoord.y + c.x * barycoord.z,\n                    a.y * barycoord.x + b.y * barycoord.y + c.y * barycoord.z,\n                    a.z * barycoord.x + b.z * barycoord.y + c.z * barycoord.z\n                );\n\n                mesh.hit.normal.copy(mesh.hit.localNormal).transformDirection(mesh.worldMatrix);\n            }\n        }\n\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\n        return hits;\n    }\n\n    intersectSphere(sphere, origin = this.origin, direction = this.direction) {\n        const ray = tempVec3c;\n        ray.sub(sphere.center, origin);\n        const tca = ray.dot(direction);\n        const d2 = ray.dot(ray) - tca * tca;\n        const radius2 = sphere.radius * sphere.radius;\n        if (d2 > radius2) return 0;\n        const thc = Math.sqrt(radius2 - d2);\n        const t0 = tca - thc;\n        const t1 = tca + thc;\n        if (t0 < 0 && t1 < 0) return 0;\n        if (t0 < 0) return t1;\n        return t0;\n    }\n\n    // Ray AABB - Ray Axis aligned bounding box testing\n    intersectBox(box, origin = this.origin, direction = this.direction) {\n        let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\n        const invdirx = 1 / direction.x;\n        const invdiry = 1 / direction.y;\n        const invdirz = 1 / direction.z;\n        const min = box.min;\n        const max = box.max;\n        tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\n        tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\n        tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\n        tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\n        if (tmin > tYmax || tYmin > tmax) return 0;\n        if (tYmin > tmin) tmin = tYmin;\n        if (tYmax < tmax) tmax = tYmax;\n        tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\n        tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\n        if (tmin > tZmax || tZmin > tmax) return 0;\n        if (tZmin > tmin) tmin = tZmin;\n        if (tZmax < tmax) tmax = tZmax;\n        if (tmax < 0) return 0;\n        return tmin >= 0 ? tmin : tmax;\n    }\n\n    intersectTriangle(a, b, c, backfaceCulling = true, origin = this.origin, direction = this.direction, normal = tempVec3g) {\n        // from https://github.com/mrdoob/three.js/blob/master/src/math/Ray.js\n        // which is from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n        const edge1 = tempVec3h;\n        const edge2 = tempVec3i;\n        const diff = tempVec3j;\n        edge1.sub(b, a);\n        edge2.sub(c, a);\n        normal.cross(edge1, edge2);\n        let DdN = direction.dot(normal);\n        if (!DdN) return 0;\n        let sign;\n        if (DdN > 0) {\n            if (backfaceCulling) return 0;\n            sign = 1;\n        } else {\n            sign = -1;\n            DdN = -DdN;\n        }\n        diff.sub(origin, a);\n        let DdQxE2 = sign * direction.dot(edge2.cross(diff, edge2));\n        if (DdQxE2 < 0) return 0;\n        let DdE1xQ = sign * direction.dot(edge1.cross(diff));\n        if (DdE1xQ < 0) return 0;\n        if (DdQxE2 + DdE1xQ > DdN) return 0;\n        let QdN = -sign * diff.dot(normal);\n        if (QdN < 0) return 0;\n        return QdN / DdN;\n    }\n\n    getBarycoord(point, a, b, c, target = tempVec3h) {\n        // From https://github.com/mrdoob/three.js/blob/master/src/math/Triangle.js\n        // static/instance method to calculate barycentric coordinates\n        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n        const v0 = tempVec3i;\n        const v1 = tempVec3j;\n        const v2 = tempVec3k;\n        v0.sub(c, a);\n        v1.sub(b, a);\n        v2.sub(point, a);\n        const dot00 = v0.dot(v0);\n        const dot01 = v0.dot(v1);\n        const dot02 = v0.dot(v2);\n        const dot11 = v1.dot(v1);\n        const dot12 = v1.dot(v2);\n        const denom = dot00 * dot11 - dot01 * dot01;\n        if (denom === 0) return target.set(-2, -1, -1);\n        const invDenom = 1 / denom;\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n        return target.set(1 - u - v, v, u);\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\n\nconst CATMULLROM = 'catmullrom';\nconst CUBICBEZIER = 'cubicbezier';\nconst QUADRATICBEZIER = 'quadraticbezier';\n\n// temp\nconst _a0 = new Vec3(),\n    _a1 = new Vec3(),\n    _a2 = new Vec3(),\n    _a3 = new Vec3();\n\n/**\n * Get the control points of cubic bezier curve.\n * @param {*} i\n * @param {*} a\n * @param {*} b\n */\nfunction getCtrlPoint(points, i, a = 0.168, b = 0.168) {\n    if (i < 1) {\n        _a0.sub(points[1], points[0]).scale(a).add(points[0]);\n    } else {\n        _a0.sub(points[i + 1], points[i - 1])\n            .scale(a)\n            .add(points[i]);\n    }\n    if (i > points.length - 3) {\n        const last = points.length - 1;\n        _a1.sub(points[last - 1], points[last])\n            .scale(b)\n            .add(points[last]);\n    } else {\n        _a1.sub(points[i], points[i + 2])\n            .scale(b)\n            .add(points[i + 1]);\n    }\n    return [_a0.clone(), _a1.clone()];\n}\n\nfunction getQuadraticBezierPoint(t, p0, c0, p1) {\n    const k = 1 - t;\n    _a0.copy(p0).scale(k ** 2);\n    _a1.copy(c0).scale(2 * k * t);\n    _a2.copy(p1).scale(t ** 2);\n    const ret = new Vec3();\n    ret.add(_a0, _a1).add(_a2);\n    return ret;\n}\n\nfunction getCubicBezierPoint(t, p0, c0, c1, p1) {\n    const k = 1 - t;\n    _a0.copy(p0).scale(k ** 3);\n    _a1.copy(c0).scale(3 * k ** 2 * t);\n    _a2.copy(c1).scale(3 * k * t ** 2);\n    _a3.copy(p1).scale(t ** 3);\n    const ret = new Vec3();\n    ret.add(_a0, _a1).add(_a2).add(_a3);\n    return ret;\n}\n\nexport class Curve {\n    constructor({ points = [new Vec3(0, 0, 0), new Vec3(0, 1, 0), new Vec3(1, 1, 0), new Vec3(1, 0, 0)], divisions = 12, type = CATMULLROM } = {}) {\n        this.points = points;\n        this.divisions = divisions;\n        this.type = type;\n    }\n\n    _getQuadraticBezierPoints(divisions = this.divisions) {\n        const points = [];\n        const count = this.points.length;\n\n        if (count < 3) {\n            console.warn('Not enough points provided.');\n            return [];\n        }\n\n        const p0 = this.points[0];\n        let c0 = this.points[1],\n            p1 = this.points[2];\n\n        for (let i = 0; i <= divisions; i++) {\n            const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n            points.push(p);\n        }\n\n        let offset = 3;\n        while (count - offset > 0) {\n            p0.copy(p1);\n            c0 = p1.scale(2).sub(c0);\n            p1 = this.points[offset];\n            for (let i = 1; i <= divisions; i++) {\n                const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n                points.push(p);\n            }\n            offset++;\n        }\n\n        return points;\n    }\n\n    _getCubicBezierPoints(divisions = this.divisions) {\n        const points = [];\n        const count = this.points.length;\n\n        if (count < 4) {\n            console.warn('Not enough points provided.');\n            return [];\n        }\n\n        let p0 = this.points[0],\n            c0 = this.points[1],\n            c1 = this.points[2],\n            p1 = this.points[3];\n\n        for (let i = 0; i <= divisions; i++) {\n            const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n            points.push(p);\n        }\n\n        let offset = 4;\n        while (count - offset > 1) {\n            p0.copy(p1);\n            c0 = p1.scale(2).sub(c1);\n            c1 = this.points[offset];\n            p1 = this.points[offset + 1];\n            for (let i = 1; i <= divisions; i++) {\n                const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n                points.push(p);\n            }\n            offset += 2;\n        }\n\n        return points;\n    }\n\n    _getCatmullRomPoints(divisions = this.divisions, a = 0.168, b = 0.168) {\n        const points = [];\n        const count = this.points.length;\n\n        if (count <= 2) {\n            return this.points;\n        }\n\n        let p0;\n        this.points.forEach((p, i) => {\n            if (i === 0) {\n                p0 = p;\n            } else {\n                const [c0, c1] = getCtrlPoint(this.points, i - 1, a, b);\n                const c = new Curve({\n                    points: [p0, c0, c1, p],\n                    type: CUBICBEZIER,\n                });\n                points.pop();\n                points.push(...c.getPoints(divisions));\n                p0 = p;\n            }\n        });\n\n        return points;\n    }\n\n    getPoints(divisions = this.divisions, a = 0.168, b = 0.168) {\n        const type = this.type;\n\n        if (type === QUADRATICBEZIER) {\n            return this._getQuadraticBezierPoints(divisions);\n        }\n\n        if (type === CUBICBEZIER) {\n            return this._getCubicBezierPoints(divisions);\n        }\n\n        if (type === CATMULLROM) {\n            return this._getCatmullRomPoints(divisions, a, b);\n        }\n\n        return this.points;\n    }\n}\n\nCurve.CATMULLROM = CATMULLROM;\nCurve.CUBICBEZIER = CUBICBEZIER;\nCurve.QUADRATICBEZIER = QUADRATICBEZIER;\n","// TODO: Destroy render targets if size changed and exists\n\nimport { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { RenderTarget } from '../core/RenderTarget.js';\nimport { Triangle } from './Triangle.js';\n\nexport class Post {\n    constructor(\n        gl,\n        {\n            width,\n            height,\n            dpr,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = gl.LINEAR,\n            geometry = new Triangle(gl),\n            targetOnly = null,\n        } = {}\n    ) {\n        this.gl = gl;\n\n        this.options = { wrapS, wrapT, minFilter, magFilter };\n\n        this.passes = [];\n\n        this.geometry = geometry;\n\n        this.uniform = { value: null };\n        this.targetOnly = targetOnly;\n\n        const fbo = (this.fbo = {\n            read: null,\n            write: null,\n            swap: () => {\n                let temp = fbo.read;\n                fbo.read = fbo.write;\n                fbo.write = temp;\n            },\n        });\n\n        this.resize({ width, height, dpr });\n    }\n\n    addPass({ vertex = defaultVertex, fragment = defaultFragment, uniforms = {}, textureUniform = 'tMap', enabled = true } = {}) {\n        uniforms[textureUniform] = { value: this.fbo.read.texture };\n\n        const program = new Program(this.gl, { vertex, fragment, uniforms });\n        const mesh = new Mesh(this.gl, { geometry: this.geometry, program });\n\n        const pass = {\n            mesh,\n            program,\n            uniforms,\n            enabled,\n            textureUniform,\n        };\n\n        this.passes.push(pass);\n        return pass;\n    }\n\n    resize({ width, height, dpr } = {}) {\n        if (dpr) this.dpr = dpr;\n        if (width) {\n            this.width = width;\n            this.height = height || width;\n        }\n\n        dpr = this.dpr || this.gl.renderer.dpr;\n        width = Math.floor((this.width || this.gl.renderer.width) * dpr);\n        height = Math.floor((this.height || this.gl.renderer.height) * dpr);\n\n        this.options.width = width;\n        this.options.height = height;\n\n        this.fbo.read = new RenderTarget(this.gl, this.options);\n        this.fbo.write = new RenderTarget(this.gl, this.options);\n    }\n\n    // Uses same arguments as renderer.render, with addition of optional texture passed in to avoid scene render\n    render({ scene, camera, texture, target = null, update = true, sort = true, frustumCull = true }) {\n        const enabledPasses = this.passes.filter((pass) => pass.enabled);\n\n        if (!texture) {\n            this.gl.renderer.render({\n                scene,\n                camera,\n                target: enabledPasses.length || (!target && this.targetOnly) ? this.fbo.write : target,\n                update,\n                sort,\n                frustumCull,\n            });\n            this.fbo.swap();\n        }\n\n        enabledPasses.forEach((pass, i) => {\n            pass.mesh.program.uniforms[pass.textureUniform].value = !i && texture ? texture : this.fbo.read.texture;\n            this.gl.renderer.render({\n                scene: pass.mesh,\n                target: i === enabledPasses.length - 1 && (target || !this.targetOnly) ? target : this.fbo.write,\n                clear: true,\n            });\n            this.fbo.swap();\n        });\n\n        this.uniform.value = this.fbo.read.texture;\n    }\n}\n\nconst defaultVertex = /* glsl */ `\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst defaultFragment = /* glsl */ `\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n`;\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\n\nconst prevPos = new Vec3();\nconst prevRot = new Quat();\nconst prevScl = new Vec3();\n\nconst nextPos = new Vec3();\nconst nextRot = new Quat();\nconst nextScl = new Vec3();\n\nexport class Animation {\n    constructor({ objects, data }) {\n        this.objects = objects;\n        this.data = data;\n        this.elapsed = 0;\n        this.weight = 1;\n        this.duration = data.frames.length - 1;\n    }\n\n    update(totalWeight = 1, isSet) {\n        const weight = isSet ? 1 : this.weight / totalWeight;\n        const elapsed = this.elapsed % this.duration;\n\n        const floorFrame = Math.floor(elapsed);\n        const blend = elapsed - floorFrame;\n        const prevKey = this.data.frames[floorFrame];\n        const nextKey = this.data.frames[(floorFrame + 1) % this.duration];\n\n        this.objects.forEach((object, i) => {\n            prevPos.fromArray(prevKey.position, i * 3);\n            prevRot.fromArray(prevKey.quaternion, i * 4);\n            prevScl.fromArray(prevKey.scale, i * 3);\n\n            nextPos.fromArray(nextKey.position, i * 3);\n            nextRot.fromArray(nextKey.quaternion, i * 4);\n            nextScl.fromArray(nextKey.scale, i * 3);\n\n            prevPos.lerp(nextPos, blend);\n            prevRot.slerp(nextRot, blend);\n            prevScl.lerp(nextScl, blend);\n\n            object.position.lerp(prevPos, weight);\n            object.quaternion.slerp(prevRot, weight);\n            object.scale.lerp(prevScl, weight);\n        });\n    }\n}\n","import { Mesh } from '../core/Mesh.js';\nimport { Transform } from '../core/Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\nimport { Animation } from './Animation.js';\n\nconst tempMat4 = new Mat4();\n\nexport class Skin extends Mesh {\n    constructor(gl, { rig, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n\n        this.createBones(rig);\n        this.createBoneTexture();\n        this.animations = [];\n\n        Object.assign(this.program.uniforms, {\n            boneTexture: { value: this.boneTexture },\n            boneTextureSize: { value: this.boneTextureSize },\n        });\n    }\n\n    createBones(rig) {\n        // Create root so that can simply update world matrix of whole skeleton\n        this.root = new Transform();\n\n        // Create bones\n        this.bones = [];\n        if (!rig.bones || !rig.bones.length) return;\n        for (let i = 0; i < rig.bones.length; i++) {\n            const bone = new Transform();\n\n            // Set initial values (bind pose)\n            bone.position.fromArray(rig.bindPose.position, i * 3);\n            bone.quaternion.fromArray(rig.bindPose.quaternion, i * 4);\n            bone.scale.fromArray(rig.bindPose.scale, i * 3);\n\n            this.bones.push(bone);\n        }\n\n        // Once created, set the hierarchy\n        rig.bones.forEach((data, i) => {\n            this.bones[i].name = data.name;\n            if (data.parent === -1) return this.bones[i].setParent(this.root);\n            this.bones[i].setParent(this.bones[data.parent]);\n        });\n\n        // Then update to calculate world matrices\n        this.root.updateMatrixWorld(true);\n\n        // Store inverse of bind pose to calculate differences\n        this.bones.forEach((bone) => {\n            bone.bindInverse = new Mat4(...bone.worldMatrix).inverse();\n        });\n    }\n\n    createBoneTexture() {\n        if (!this.bones.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.bones.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    addAnimation(data) {\n        const animation = new Animation({ objects: this.bones, data });\n        this.animations.push(animation);\n        return animation;\n    }\n\n    update() {\n        // Calculate combined animation weight\n        let total = 0;\n        this.animations.forEach((animation) => (total += animation.weight));\n\n        this.animations.forEach((animation, i) => {\n            // force first animation to set in order to reset frame\n            animation.update(total, i === 0);\n        });\n    }\n\n    draw({ camera } = {}) {\n        // Update world matrices manually, as not part of scene graph\n        this.root.updateMatrixWorld(true);\n\n        // Update bone texture\n        this.bones.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        if (this.boneTexture) this.boneTexture.needsUpdate = true;\n\n        super.draw({ camera });\n    }\n}\n","import { Program } from '../core/Program.js';\n\nconst vertex = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n`;\n\nexport function NormalProgram(gl) {\n    return new Program(gl, {\n        vertex: vertex,\n        fragment: fragment,\n        cullFace: null,\n    });\n}\n","import { RenderTarget } from '../core/RenderTarget.js';\nimport { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Vec2 } from '../math/Vec2.js';\nimport { Triangle } from './Triangle.js';\n\nexport class Flowmap {\n    constructor(\n        gl,\n        {\n            size = 128, // default size of the render targets\n            falloff = 0.3, // size of the stamp, percentage of the size\n            alpha = 1, // opacity of the stamp\n            dissipation = 0.98, // affects the speed that the stamp fades. Closer to 1 is slower\n            type, // Pass in gl.FLOAT to force it, defaults to gl.HALF_FLOAT\n        } = {}\n    ) {\n        const _this = this;\n        this.gl = gl;\n\n        // output uniform containing render target textures\n        this.uniform = { value: null };\n\n        this.mask = {\n            read: null,\n            write: null,\n\n            // Helper function to ping pong the render targets and update the uniform\n            swap: () => {\n                let temp = _this.mask.read;\n                _this.mask.read = _this.mask.write;\n                _this.mask.write = temp;\n                _this.uniform.value = _this.mask.read.texture;\n            },\n        };\n\n        {\n            createFBOs();\n\n            this.aspect = 1;\n            this.mouse = new Vec2();\n            this.velocity = new Vec2();\n\n            this.mesh = initProgram();\n        }\n\n        function createFBOs() {\n            // Requested type not supported, fall back to half float\n            if (!type) type = gl.HALF_FLOAT || gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES;\n\n            let minFilter = (() => {\n                if (gl.renderer.isWebgl2) return gl.LINEAR;\n                if (gl.renderer.extensions[`OES_texture_${type === gl.FLOAT ? '' : 'half_'}float_linear`]) return gl.LINEAR;\n                return gl.NEAREST;\n            })();\n\n            const options = {\n                width: size,\n                height: size,\n                type,\n                format: gl.RGBA,\n                internalFormat: gl.renderer.isWebgl2 ? (type === gl.FLOAT ? gl.RGBA32F : gl.RGBA16F) : gl.RGBA,\n                minFilter,\n                depth: false,\n            };\n\n            _this.mask.read = new RenderTarget(gl, options);\n            _this.mask.write = new RenderTarget(gl, options);\n            _this.mask.swap();\n        }\n\n        function initProgram() {\n            return new Mesh(gl, {\n                // Triangle that includes -1 to 1 range for 'position', and 0 to 1 range for 'uv'.\n                geometry: new Triangle(gl),\n\n                program: new Program(gl, {\n                    vertex,\n                    fragment,\n                    uniforms: {\n                        tMap: _this.uniform,\n\n                        uFalloff: { value: falloff * 0.5 },\n                        uAlpha: { value: alpha },\n                        uDissipation: { value: dissipation },\n\n                        // User needs to update these\n                        uAspect: { value: 1 },\n                        uMouse: { value: _this.mouse },\n                        uVelocity: { value: _this.velocity },\n                    },\n                    depthTest: false,\n                }),\n            });\n        }\n    }\n\n    update() {\n        this.mesh.program.uniforms.uAspect.value = this.aspect;\n\n        this.gl.renderer.render({\n            scene: this.mesh,\n            target: this.mask.write,\n            clear: false,\n        });\n        this.mask.swap();\n    }\n}\n\nconst vertex = /* glsl */ `\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n\n    uniform sampler2D tMap;\n\n    uniform float uFalloff;\n    uniform float uAlpha;\n    uniform float uDissipation;\n    \n    uniform float uAspect;\n    uniform vec2 uMouse;\n    uniform vec2 uVelocity;\n\n    varying vec2 vUv;\n\n    void main() {\n        vec4 color = texture2D(tMap, vUv) * uDissipation;\n\n        vec2 cursor = vUv - uMouse;\n        cursor.x *= uAspect;\n\n        vec3 stamp = vec3(uVelocity * vec2(1, -1), 1.0 - pow(1.0 - min(1.0, length(uVelocity)), 3.0));\n        float falloff = smoothstep(uFalloff, 0.0, length(cursor)) * uAlpha;\n\n        color.rgb = mix(color.rgb, stamp, vec3(falloff));\n\n        gl_FragColor = color;\n    }\n`;\n","import { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Texture } from '../core/Texture.js';\nimport { RenderTarget } from '../core/RenderTarget.js';\nimport { Triangle } from './Triangle.js';\n\nexport class GPGPU {\n    constructor(\n        gl,\n        {\n            // Always pass in array of vec4s (RGBA values within texture)\n            data = new Float32Array(16),\n            geometry = new Triangle(gl),\n            type, // Pass in gl.FLOAT to force it, defaults to gl.HALF_FLOAT\n        }\n    ) {\n        this.gl = gl;\n        const initialData = data;\n        this.passes = [];\n        this.geometry = geometry;\n        this.dataLength = initialData.length / 4;\n\n        // Windows and iOS only like power of 2 textures\n        // Find smallest PO2 that fits data\n        this.size = Math.pow(2, Math.ceil(Math.log(Math.ceil(Math.sqrt(this.dataLength))) / Math.LN2));\n\n        // Create coords for output texture\n        this.coords = new Float32Array(this.dataLength * 2);\n        for (let i = 0; i < this.dataLength; i++) {\n            const x = (i % this.size) / this.size; // to add 0.5 to be center pixel ?\n            const y = Math.floor(i / this.size) / this.size;\n            this.coords.set([x, y], i * 2);\n        }\n\n        // Use original data if already correct length of PO2 texture, else copy to new array of correct length\n        const floatArray = (() => {\n            if (initialData.length === this.size * this.size * 4) {\n                return initialData;\n            } else {\n                const a = new Float32Array(this.size * this.size * 4);\n                a.set(initialData);\n                return a;\n            }\n        })();\n\n        // Create output texture uniform using input float texture with initial data\n        this.uniform = {\n            value: new Texture(gl, {\n                image: floatArray,\n                target: gl.TEXTURE_2D,\n                type: gl.FLOAT,\n                format: gl.RGBA,\n                internalFormat: gl.renderer.isWebgl2 ? gl.RGBA32F : gl.RGBA,\n                wrapS: gl.CLAMP_TO_EDGE,\n                wrapT: gl.CLAMP_TO_EDGE,\n                generateMipmaps: false,\n                minFilter: gl.NEAREST,\n                magFilter: gl.NEAREST,\n                width: this.size,\n                flipY: false,\n            }),\n        };\n\n        // Create FBOs\n        const options = {\n            width: this.size,\n            height: this.size,\n            type: type || gl.HALF_FLOAT || gl.renderer.extensions['OES_texture_half_float'].HALF_FLOAT_OES,\n            format: gl.RGBA,\n            internalFormat: gl.renderer.isWebgl2 ? (type === gl.FLOAT ? gl.RGBA32F : gl.RGBA16F) : gl.RGBA,\n            minFilter: gl.NEAREST,\n            depth: false,\n            unpackAlignment: 1,\n        };\n\n        this.fbo = {\n            read: new RenderTarget(gl, options),\n            write: new RenderTarget(gl, options),\n            swap: () => {\n                let temp = this.fbo.read;\n                this.fbo.read = this.fbo.write;\n                this.fbo.write = temp;\n                this.uniform.value = this.fbo.read.texture;\n            },\n        };\n    }\n\n    addPass({ vertex = defaultVertex, fragment = defaultFragment, uniforms = {}, textureUniform = 'tMap', enabled = true } = {}) {\n        uniforms[textureUniform] = this.uniform;\n        const program = new Program(this.gl, { vertex, fragment, uniforms });\n        const mesh = new Mesh(this.gl, { geometry: this.geometry, program });\n\n        const pass = {\n            mesh,\n            program,\n            uniforms,\n            enabled,\n            textureUniform,\n        };\n\n        this.passes.push(pass);\n        return pass;\n    }\n\n    render() {\n        const enabledPasses = this.passes.filter((pass) => pass.enabled);\n\n        enabledPasses.forEach((pass, i) => {\n            this.gl.renderer.render({\n                scene: pass.mesh,\n                target: this.fbo.write,\n                clear: false,\n            });\n            this.fbo.swap();\n        });\n    }\n}\n\nconst defaultVertex = /* glsl */ `\n    attribute vec2 uv;\n    attribute vec2 position;\n\n    varying vec2 vUv;\n\n    void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst defaultFragment = /* glsl */ `\n    precision highp float;\n\n    uniform sampler2D tMap;\n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor = texture2D(tMap, vUv);\n    }\n`;\n","import { Geometry } from '../core/Geometry.js';\nimport { Program } from '../core/Program.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Vec2 } from '../math/Vec2.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Color } from '../math/Color.js';\n\nconst tmp = new Vec3();\n\nexport class Polyline {\n    constructor(\n        gl,\n        {\n            points, // Array of Vec3s\n            vertex = defaultVertex,\n            fragment = defaultFragment,\n            uniforms = {},\n            attributes = {}, // For passing in custom attribs\n        }\n    ) {\n        this.gl = gl;\n        this.points = points;\n        this.count = points.length;\n\n        // Create buffers\n        this.position = new Float32Array(this.count * 3 * 2);\n        this.prev = new Float32Array(this.count * 3 * 2);\n        this.next = new Float32Array(this.count * 3 * 2);\n        const side = new Float32Array(this.count * 1 * 2);\n        const uv = new Float32Array(this.count * 2 * 2);\n        const index = new Uint16Array((this.count - 1) * 3 * 2);\n\n        // Set static buffers\n        for (let i = 0; i < this.count; i++) {\n            side.set([-1, 1], i * 2);\n            const v = i / (this.count - 1);\n            uv.set([0, v, 1, v], i * 4);\n\n            if (i === this.count - 1) continue;\n            const ind = i * 2;\n            index.set([ind + 0, ind + 1, ind + 2], (ind + 0) * 3);\n            index.set([ind + 2, ind + 1, ind + 3], (ind + 1) * 3);\n        }\n\n        const geometry = (this.geometry = new Geometry(\n            gl,\n            Object.assign(attributes, {\n                position: { size: 3, data: this.position },\n                prev: { size: 3, data: this.prev },\n                next: { size: 3, data: this.next },\n                side: { size: 1, data: side },\n                uv: { size: 2, data: uv },\n                index: { size: 1, data: index },\n            })\n        ));\n\n        // Populate dynamic buffers\n        this.updateGeometry();\n\n        if (!uniforms.uResolution) this.resolution = uniforms.uResolution = { value: new Vec2() };\n        if (!uniforms.uDPR) this.dpr = uniforms.uDPR = { value: 1 };\n        if (!uniforms.uThickness) this.thickness = uniforms.uThickness = { value: 1 };\n        if (!uniforms.uColor) this.color = uniforms.uColor = { value: new Color('#000') };\n        if (!uniforms.uMiter) this.miter = uniforms.uMiter = { value: 1 };\n\n        // Set size uniforms' values\n        this.resize();\n\n        const program = (this.program = new Program(gl, {\n            vertex,\n            fragment,\n            uniforms,\n        }));\n\n        this.mesh = new Mesh(gl, { geometry, program });\n    }\n\n    updateGeometry() {\n        this.points.forEach((p, i) => {\n            p.toArray(this.position, i * 3 * 2);\n            p.toArray(this.position, i * 3 * 2 + 3);\n\n            if (!i) {\n                // If first point, calculate prev using the distance to 2nd point\n                tmp.copy(p)\n                    .sub(this.points[i + 1])\n                    .add(p);\n                tmp.toArray(this.prev, i * 3 * 2);\n                tmp.toArray(this.prev, i * 3 * 2 + 3);\n            } else {\n                p.toArray(this.next, (i - 1) * 3 * 2);\n                p.toArray(this.next, (i - 1) * 3 * 2 + 3);\n            }\n\n            if (i === this.points.length - 1) {\n                // If last point, calculate next using distance to 2nd last point\n                tmp.copy(p)\n                    .sub(this.points[i - 1])\n                    .add(p);\n                tmp.toArray(this.next, i * 3 * 2);\n                tmp.toArray(this.next, i * 3 * 2 + 3);\n            } else {\n                p.toArray(this.prev, (i + 1) * 3 * 2);\n                p.toArray(this.prev, (i + 1) * 3 * 2 + 3);\n            }\n        });\n\n        this.geometry.attributes.position.needsUpdate = true;\n        this.geometry.attributes.prev.needsUpdate = true;\n        this.geometry.attributes.next.needsUpdate = true;\n    }\n\n    // Only need to call if not handling resolution uniforms manually\n    resize() {\n        // Update automatic uniforms if not overridden\n        if (this.resolution) this.resolution.value.set(this.gl.canvas.width, this.gl.canvas.height);\n        if (this.dpr) this.dpr.value = this.gl.renderer.dpr;\n    }\n}\n\nconst defaultVertex = /* glsl */ `\n    precision highp float;\n\n    attribute vec3 position;\n    attribute vec3 next;\n    attribute vec3 prev;\n    attribute vec2 uv;\n    attribute float side;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n    uniform vec2 uResolution;\n    uniform float uDPR;\n    uniform float uThickness;\n    uniform float uMiter;\n\n    varying vec2 vUv;\n\n    vec4 getPosition() {\n        mat4 mvp = projectionMatrix * modelViewMatrix;\n        vec4 current = mvp * vec4(position, 1);\n        vec4 nextPos = mvp * vec4(next, 1);\n        vec4 prevPos = mvp * vec4(prev, 1);\n\n        vec2 aspect = vec2(uResolution.x / uResolution.y, 1);    \n        vec2 currentScreen = current.xy / current.w * aspect;\n        vec2 nextScreen = nextPos.xy / nextPos.w * aspect;\n        vec2 prevScreen = prevPos.xy / prevPos.w * aspect;\n    \n        vec2 dir1 = normalize(currentScreen - prevScreen);\n        vec2 dir2 = normalize(nextScreen - currentScreen);\n        vec2 dir = normalize(dir1 + dir2);\n    \n        vec2 normal = vec2(-dir.y, dir.x);\n        normal /= mix(1.0, max(0.3, dot(normal, vec2(-dir1.y, dir1.x))), uMiter);\n        normal /= aspect;\n\n        float pixelWidthRatio = 1.0 / (uResolution.y / uDPR);\n        float pixelWidth = current.w * pixelWidthRatio;\n        normal *= pixelWidth * uThickness;\n        current.xy -= normal * side;\n    \n        return current;\n    }\n\n    void main() {\n        vUv = uv;\n        gl_Position = getPosition();\n    }\n`;\n\nconst defaultFragment = /* glsl */ `\n    precision highp float;\n\n    uniform vec3 uColor;\n    \n    varying vec2 vUv;\n\n    void main() {\n        gl_FragColor.rgb = uColor;\n        gl_FragColor.a = 1.0;\n    }\n`;\n","import { Camera } from '../core/Camera.js';\nimport { Program } from '../core/Program.js';\nimport { RenderTarget } from '../core/RenderTarget.js';\n\nexport class Shadow {\n    constructor(gl, { light = new Camera(gl), width = 1024, height = width }) {\n        this.gl = gl;\n\n        this.light = light;\n\n        this.target = new RenderTarget(gl, { width, height });\n\n        this.depthProgram = new Program(gl, {\n            vertex: defaultVertex,\n            fragment: defaultFragment,\n            cullFace: null,\n        });\n\n        this.castMeshes = [];\n    }\n\n    add({\n        mesh,\n        receive = true,\n        cast = true,\n        vertex = defaultVertex,\n        fragment = defaultFragment,\n        uniformProjection = 'shadowProjectionMatrix',\n        uniformView = 'shadowViewMatrix',\n        uniformTexture = 'tShadow',\n    }) {\n        // Add uniforms to existing program\n        if (receive && !mesh.program.uniforms[uniformProjection]) {\n            mesh.program.uniforms[uniformProjection] = { value: this.light.projectionMatrix };\n            mesh.program.uniforms[uniformView] = { value: this.light.viewMatrix };\n            mesh.program.uniforms[uniformTexture] = { value: this.target.texture };\n        }\n\n        if (!cast) return;\n        this.castMeshes.push(mesh);\n\n        // Store program for when switching between depth override\n        mesh.colorProgram = mesh.program;\n\n        // Check if depth program already attached\n        if (mesh.depthProgram) return;\n\n        // Use global depth override if nothing custom passed in\n        if (vertex === defaultVertex && fragment === defaultFragment) {\n            mesh.depthProgram = this.depthProgram;\n            return;\n        }\n\n        // Create custom override program\n        mesh.depthProgram = new Program(this.gl, {\n            vertex,\n            fragment,\n            cullFace: null,\n        });\n    }\n\n    render({ scene }) {\n        // For depth render, replace program with depth override.\n        // Hide meshes not casting shadows.\n        scene.traverse((node) => {\n            if (!node.draw) return;\n            if (!!~this.castMeshes.indexOf(node)) {\n                node.program = node.depthProgram;\n            } else {\n                node.isForceVisibility = node.visible;\n                node.visible = false;\n            }\n        });\n\n        // Render the depth shadow map using the light as the camera\n        this.gl.renderer.render({\n            scene,\n            camera: this.light,\n            target: this.target,\n        });\n\n        // Then switch the program back to the normal one\n        scene.traverse((node) => {\n            if (!node.draw) return;\n            if (!!~this.castMeshes.indexOf(node)) {\n                node.program = node.colorProgram;\n            } else {\n                node.visible = node.isForceVisibility;\n            }\n        });\n    }\n}\n\nconst defaultVertex = /* glsl */ `\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst defaultFragment = /* glsl */ `\n    precision highp float;\n\n    vec4 packRGBA (float v) {\n        vec4 pack = fract(vec4(1.0, 255.0, 65025.0, 16581375.0) * v);\n        pack -= pack.yzww * vec2(1.0 / 255.0, 0.0).xxxy;\n        return pack;\n    }\n\n    void main() {\n        gl_FragColor = packRGBA(gl_FragCoord.z);\n    }\n`;\n","import { Texture } from '../core/Texture.js';\n\n// TODO: Support cubemaps\n// Generate textures using https://github.com/TimvanScherpenzeel/texture-compressor\n\nexport class KTXTexture extends Texture {\n    constructor(gl, { buffer, wrapS = gl.CLAMP_TO_EDGE, wrapT = gl.CLAMP_TO_EDGE, anisotropy = 0, minFilter, magFilter } = {}) {\n        super(gl, {\n            generateMipmaps: false,\n            wrapS,\n            wrapT,\n            anisotropy,\n            minFilter,\n            magFilter,\n        });\n\n        if (buffer) return this.parseBuffer(buffer);\n    }\n\n    parseBuffer(buffer) {\n        const ktx = new KhronosTextureContainer(buffer);\n        ktx.mipmaps.isCompressedTexture = true;\n\n        // Update texture\n        this.image = ktx.mipmaps;\n        this.internalFormat = ktx.glInternalFormat;\n        if (ktx.numberOfMipmapLevels > 1) {\n            if (this.minFilter === this.gl.LINEAR) this.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        } else {\n            if (this.minFilter === this.gl.NEAREST_MIPMAP_LINEAR) this.minFilter = this.gl.LINEAR;\n        }\n\n        // TODO: support cube maps\n        // ktx.numberOfFaces\n    }\n}\n\nfunction KhronosTextureContainer(buffer) {\n    const idCheck = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\n    const id = new Uint8Array(buffer, 0, 12);\n    for (let i = 0; i < id.length; i++) if (id[i] !== idCheck[i]) return console.error('File missing KTX identifier');\n\n    // TODO: Is this always 4? Tested: [android, macos]\n    const size = Uint32Array.BYTES_PER_ELEMENT;\n    const head = new DataView(buffer, 12, 13 * size);\n    const littleEndian = head.getUint32(0, true) === 0x04030201;\n    const glType = head.getUint32(1 * size, littleEndian);\n    if (glType !== 0) return console.warn('only compressed formats currently supported');\n    this.glInternalFormat = head.getUint32(4 * size, littleEndian);\n    let width = head.getUint32(6 * size, littleEndian);\n    let height = head.getUint32(7 * size, littleEndian);\n    this.numberOfFaces = head.getUint32(10 * size, littleEndian);\n    this.numberOfMipmapLevels = Math.max(1, head.getUint32(11 * size, littleEndian));\n    const bytesOfKeyValueData = head.getUint32(12 * size, littleEndian);\n\n    this.mipmaps = [];\n    let offset = 12 + 13 * 4 + bytesOfKeyValueData;\n    for (let level = 0; level < this.numberOfMipmapLevels; level++) {\n        const levelSize = new Int32Array(buffer, offset, 1)[0]; // size per face, since not supporting array cubemaps\n        offset += 4; // levelSize field\n        for (let face = 0; face < this.numberOfFaces; face++) {\n            const data = new Uint8Array(buffer, offset, levelSize);\n            this.mipmaps.push({ data, width, height });\n            offset += levelSize;\n            offset += 3 - ((levelSize + 3) % 4); // add padding for odd sized image\n        }\n        width = width >> 1;\n        height = height >> 1;\n    }\n}\n","import { Texture } from '../core/Texture.js';\nimport { KTXTexture } from './KTXTexture.js';\n\n// For compressed textures, generate using https://github.com/TimvanScherpenzeel/texture-compressor\n\nlet cache = {};\nconst supportedExtensions = [];\n\nexport class TextureLoader {\n    static load(\n        gl,\n        {\n            src, // string or object of extension:src key-values\n            // {\n            //     pvrtc: '...ktx',\n            //     s3tc: '...ktx',\n            //     etc: '...ktx',\n            //     etc1: '...ktx',\n            //     astc: '...ktx',\n            //     webp: '...webp',\n            //     jpg: '...jpg',\n            //     png: '...png',\n            // }\n\n            // Only props relevant to KTXTexture\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            anisotropy = 0,\n\n            // For regular images\n            format = gl.RGBA,\n            internalFormat = format,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = true,\n        } = {}\n    ) {\n        const support = this.getSupportedExtensions(gl);\n        let ext = 'none';\n\n        // If src is string, determine which format from the extension\n        if (typeof src === 'string') {\n            ext = src.split('.').pop().split('?')[0].toLowerCase();\n        }\n\n        // If src is object, use supported extensions and provided list to choose best option\n        // Get first supported match, so put in order of preference\n        if (typeof src === 'object') {\n            for (const prop in src) {\n                if (support.includes(prop.toLowerCase())) {\n                    ext = prop.toLowerCase();\n                    src = src[prop];\n                    break;\n                }\n            }\n        }\n\n        // Stringify props\n        const cacheID =\n            src +\n            wrapS +\n            wrapT +\n            anisotropy +\n            format +\n            internalFormat +\n            generateMipmaps +\n            minFilter +\n            magFilter +\n            premultiplyAlpha +\n            unpackAlignment +\n            flipY +\n            gl.renderer.id;\n\n        // Check cache for existing texture\n        if (cache[cacheID]) return cache[cacheID];\n\n        let texture;\n        switch (ext) {\n            case 'ktx':\n            case 'pvrtc':\n            case 's3tc':\n            case 'etc':\n            case 'etc1':\n            case 'astc':\n                // Load compressed texture using KTX format\n                texture = new KTXTexture(gl, {\n                    src,\n                    wrapS,\n                    wrapT,\n                    anisotropy,\n                    minFilter,\n                    magFilter,\n                });\n                texture.loaded = this.loadKTX(src, texture);\n                break;\n            case 'webp':\n            case 'jpg':\n            case 'jpeg':\n            case 'png':\n                texture = new Texture(gl, {\n                    wrapS,\n                    wrapT,\n                    anisotropy,\n                    format,\n                    internalFormat,\n                    generateMipmaps,\n                    minFilter,\n                    magFilter,\n                    premultiplyAlpha,\n                    unpackAlignment,\n                    flipY,\n                });\n                texture.loaded = this.loadImage(gl, src, texture);\n                break;\n            default:\n                console.warn('No supported format supplied');\n                texture = new Texture(gl);\n        }\n\n        texture.ext = ext;\n        cache[cacheID] = texture;\n        return texture;\n    }\n\n    static getSupportedExtensions(gl) {\n        if (supportedExtensions.length) return supportedExtensions;\n\n        const extensions = {\n            pvrtc: gl.renderer.getExtension('WEBGL_compressed_texture_pvrtc') || gl.renderer.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            s3tc: gl.renderer.getExtension('WEBGL_compressed_texture_s3tc'),\n            // etc: gl.renderer.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.renderer.getExtension('WEBGL_compressed_texture_etc1'),\n            astc: gl.renderer.getExtension('WEBGL_compressed_texture_astc'),\n            bc7: gl.renderer.getExtension('EXT_texture_compression_bptc'),\n        };\n\n        for (const ext in extensions) if (extensions[ext]) supportedExtensions.push(ext);\n\n        // Check for WebP support\n        if (detectWebP()) supportedExtensions.push('webp');\n\n        // Formats supported by all\n        supportedExtensions.push('png', 'jpg');\n\n        return supportedExtensions;\n    }\n\n    static loadKTX(src, texture) {\n        return fetch(src)\n            .then((res) => res.arrayBuffer())\n            .then((buffer) => texture.parseBuffer(buffer));\n    }\n\n    static loadImage(gl, src, texture) {\n        return decodeImage(src).then((imgBmp) => {\n            // Catch non POT textures and update params to avoid errors\n            if (!powerOfTwo(imgBmp.width) || !powerOfTwo(imgBmp.height)) {\n                if (texture.generateMipmaps) texture.generateMipmaps = false;\n                if (texture.minFilter === gl.NEAREST_MIPMAP_LINEAR) texture.minFilter = gl.LINEAR;\n                if (texture.wrapS === gl.REPEAT) texture.wrapS = texture.wrapT = gl.CLAMP_TO_EDGE;\n            }\n\n            texture.image = imgBmp;\n\n            // For createImageBitmap, close once uploaded\n            texture.onUpdate = () => {\n                if (imgBmp.close) imgBmp.close();\n                texture.onUpdate = null;\n            };\n\n            return imgBmp;\n        });\n    }\n\n    static clearCache() {\n        cache = {};\n    }\n}\n\nfunction detectWebP() {\n    return document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') == 0;\n}\n\nfunction powerOfTwo(value) {\n    // (width & (width - 1)) !== 0\n    return Math.log2(value) % 1 === 0;\n}\n\nfunction decodeImage(src) {\n    return new Promise((resolve) => {\n        // Only chrome's implementation of createImageBitmap is fully supported\n        const isChrome = navigator.userAgent.toLowerCase().includes('chrome');\n        if (!!window.createImageBitmap && isChrome) {\n            fetch(src, { mode: 'cors' })\n                .then(r => r.blob())\n                .then(b => createImageBitmap(b, { imageOrientation: 'flipY', premultiplyAlpha: 'none' }))\n                .then(resolve);\n        } else {\n            const img = new Image();\n\n            img.crossOrigin = '';\n            img.src = src;\n            img.onload = () => resolve(img);\n        }\n    });\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\n\nconst tmpVec3A = new Vec3();\nconst tmpVec3B = new Vec3();\nconst tmpVec3C = new Vec3();\nconst tmpVec3D = new Vec3();\n\nconst tmpQuatA = new Quat();\nconst tmpQuatB = new Quat();\nconst tmpQuatC = new Quat();\nconst tmpQuatD = new Quat();\n\nexport class GLTFAnimation {\n    constructor(data, weight = 1) {\n        this.data = data;\n        this.elapsed = 0;\n        this.weight = weight;\n\n        // Set to false to not apply modulo to elapsed against duration\n        this.loop = true;\n\n        // Find starting time as exports from blender (perhaps others too) don't always start from 0\n        this.startTime = data.reduce((a, { times }) => Math.min(a, times[0]), Infinity);\n        // Get largest final time in all channels to calculate duration\n        this.endTime = data.reduce((a, { times }) => Math.max(a, times[times.length - 1]), 0);\n        this.duration = this.endTime - this.startTime;\n    }\n\n    update(totalWeight = 1, isSet) {\n        const weight = isSet ? 1 : this.weight / totalWeight;\n        const elapsed = (this.loop ? this.elapsed % this.duration : Math.min(this.elapsed, this.duration - 0.001)) + this.startTime;\n\n        this.data.forEach(({ node, transform, interpolation, times, values }) => {\n            // Get index of two time values elapsed is between\n            const prevIndex =\n                Math.max(\n                    1,\n                    times.findIndex((t) => t > elapsed)\n                ) - 1;\n            const nextIndex = prevIndex + 1;\n\n            // Get linear blend/alpha between the two\n            let alpha = (elapsed - times[prevIndex]) / (times[nextIndex] - times[prevIndex]);\n            if (interpolation === 'STEP') alpha = 0;\n\n            let prevVal = tmpVec3A;\n            let prevTan = tmpVec3B;\n            let nextTan = tmpVec3C;\n            let nextVal = tmpVec3D;\n            let size = 3;\n\n            if (transform === 'quaternion') {\n                prevVal = tmpQuatA;\n                prevTan = tmpQuatB;\n                nextTan = tmpQuatC;\n                nextVal = tmpQuatD;\n                size = 4;\n            }\n\n            if (interpolation === 'CUBICSPLINE') {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size * 3 + size * 1);\n                prevTan.fromArray(values, prevIndex * size * 3 + size * 2);\n                nextTan.fromArray(values, nextIndex * size * 3 + size * 0);\n                nextVal.fromArray(values, nextIndex * size * 3 + size * 1);\n\n                // interpolate for final value\n                prevVal = this.cubicSplineInterpolate(alpha, prevVal, prevTan, nextTan, nextVal);\n                if (size === 4) prevVal.normalize();\n            } else {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size);\n                nextVal.fromArray(values, nextIndex * size);\n\n                // interpolate for final value\n                if (size === 4) prevVal.slerp(nextVal, alpha);\n                else prevVal.lerp(nextVal, alpha);\n            }\n\n            // interpolate between multiple possible animations\n            if (size === 4) node[transform].slerp(prevVal, weight);\n            else node[transform].lerp(prevVal, weight);\n        });\n    }\n\n    cubicSplineInterpolate(t, prevVal, prevTan, nextTan, nextVal) {\n        const t2 = t * t;\n        const t3 = t2 * t;\n\n        const s2 = 3 * t2 - 2 * t3;\n        const s3 = t3 - t2;\n        const s0 = 1 - s2;\n        const s1 = s3 - t2 + t;\n\n        for (let i = 0; i < prevVal.length; i++) {\n            prevVal[i] = s0 * prevVal[i] + s1 * (1 - t) * prevTan[i] + s2 * nextVal[i] + s3 * t * nextTan[i];\n        }\n\n        return prevVal;\n    }\n}\n","import { Mesh } from '../core/Mesh.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\n\nconst tempMat4 = new Mat4();\nconst identity = new Mat4();\n\nexport class GLTFSkin extends Mesh {\n    constructor(gl, { skeleton, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n        this.skeleton = skeleton;\n        this.program = program;\n        this.createBoneTexture();\n        this.animations = [];\n    }\n\n    createBoneTexture() {\n        if (!this.skeleton.joints.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    // addAnimation(data) {\n    //     const animation = new Animation({ objects: this.bones, data });\n    //     this.animations.push(animation);\n    //     return animation;\n    // }\n\n    // updateAnimations() {\n    //     // Calculate combined animation weight\n    //     let total = 0;\n    //     this.animations.forEach((animation) => (total += animation.weight));\n\n    //     this.animations.forEach((animation, i) => {\n    //         // force first animation to set in order to reset frame\n    //         animation.update(total, i === 0);\n    //     });\n    // }\n\n    updateUniforms() {\n        // Update bone texture\n        this.skeleton.joints.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        if (this.boneTexture) this.boneTexture.needsUpdate = true;\n    }\n\n    draw({ camera } = {}) {\n        if (!this.program.uniforms.boneTexture) {\n            Object.assign(this.program.uniforms, {\n                boneTexture: { value: this.boneTexture },\n                boneTextureSize: { value: this.boneTextureSize },\n            });\n        }\n\n        this.updateUniforms();\n\n        // Switch the world matrix with identity to ignore any transforms\n        // on the mesh itself - only use skeleton's transforms\n        const _worldMatrix = this.worldMatrix;\n        this.worldMatrix = identity;\n\n        super.draw({ camera });\n\n        // Switch back to leave identity untouched\n        this.worldMatrix = _worldMatrix;\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\nimport { Transform } from '../core/Transform.js';\nimport { Texture } from '../core/Texture.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { GLTFAnimation } from './GLTFAnimation.js';\nimport { GLTFSkin } from './GLTFSkin.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { NormalProgram } from './NormalProgram.js';\n\n// Supports\n// [x] Geometry\n// [ ] Sparse support\n// [x] Nodes and Hierarchy\n// [x] Instancing\n// [ ] Morph Targets\n// [x] Skins\n// [ ] Materials\n// [x] Textures\n// [x] Animation\n// [ ] Cameras\n// [ ] Extensions\n// [x] GLB support\n\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n// TODO: what to do if multiple instances are in different groups? Only uses local matrices\n// TODO: what if instancing isn't wanted? Eg collision maps\n// TODO: ie11 fallback for TextDecoder?\n\nconst TYPE_ARRAY = {\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n    'image/jpeg': Uint8Array,\n    'image/png': Uint8Array,\n};\n\nconst TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n};\n\nconst ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex',\n};\n\nconst TRANSFORMS = {\n    translation: 'position',\n    rotation: 'quaternion',\n    scale: 'scale',\n};\n\nexport class GLTFLoader {\n    static async load(gl, src) {\n        const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n        // load main description json\n        const desc = await this.parseDesc(src);\n\n        return await this.parse(gl, desc, dir);\n    }\n\n    static async parse(gl, desc, dir) {\n        if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n\n        // Load buffers async\n        const buffers = await this.loadBuffers(desc, dir);\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        gl.renderer.bindVertexArray(null);\n\n        // Create gl buffers from bufferViews\n        const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n        // Create images from either bufferViews or separate image files\n        const images = this.parseImages(gl, desc, dir, bufferViews);\n\n        const textures = this.parseTextures(gl, desc, images);\n\n        // Just pass through material data for now\n        const materials = this.parseMaterials(gl, desc, textures);\n\n        // Fetch the inverse bind matrices for skeleton joints\n        const skins = this.parseSkins(gl, desc, bufferViews);\n\n        // Create geometries for each mesh primitive\n        const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n        // Create transforms, meshes and hierarchy\n        const nodes = this.parseNodes(gl, desc, meshes, skins);\n\n        // Place nodes in skeletons\n        this.populateSkins(skins, nodes);\n\n        // Create animation handlers\n        const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n        // Get top level nodes for each scene\n        const scenes = this.parseScenes(desc, nodes);\n        const scene = scenes[desc.scene];\n\n        // Remove null nodes (instanced transforms)\n        for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n\n        return {\n            json: desc,\n            buffers,\n            bufferViews,\n            images,\n            textures,\n            materials,\n            meshes,\n            nodes,\n            animations,\n            scenes,\n            scene,\n        };\n    }\n\n    static async parseDesc(src) {\n        if (!src.match(/\\.glb/)) {\n            return await fetch(src).then((res) => res.json());\n        } else {\n            return await fetch(src)\n                .then((res) => res.arrayBuffer())\n                .then((glb) => this.unpackGLB(glb));\n        }\n    }\n\n    // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n    static unpackGLB(glb) {\n        // Decode and verify GLB header.\n        const header = new Uint32Array(glb, 0, 3);\n        if (header[0] !== 0x46546c67) {\n            throw new Error('Invalid glTF asset.');\n        } else if (header[1] !== 2) {\n            throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n        }\n        // Decode and verify chunk headers.\n        const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n        const jsonByteOffset = 20;\n        const jsonByteLength = jsonChunkHeader[0];\n        if (jsonChunkHeader[1] !== 0x4e4f534a) {\n            throw new Error('Unexpected GLB layout.');\n        }\n\n        // Decode JSON.\n        const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n        const json = JSON.parse(jsonText);\n        // JSON only\n        if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n\n        const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n        if (binaryChunkHeader[1] !== 0x004e4942) {\n            throw new Error('Unexpected GLB layout.');\n        }\n        // Decode content.\n        const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n        const binaryByteLength = binaryChunkHeader[0];\n        const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n        // Attach binary to buffer\n        json.buffers[0].binary = binary;\n        return json;\n    }\n\n    // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n    static resolveURI(uri, dir) {\n        // Invalid URI\n        if (typeof uri !== 'string' || uri === '') return '';\n\n        // Host Relative URI\n        if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n            dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URI http://, https://, //\n        if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(uri)) return uri;\n\n        // Blob URI\n        if (/^blob:.*$/i.test(uri)) return uri;\n\n        // Relative URI\n        return dir + uri;\n    }\n\n    static async loadBuffers(desc, dir) {\n        if (!desc.buffers) return null;\n        return await Promise.all(\n            desc.buffers.map((buffer) => {\n                // For GLB, binary buffer ready to go\n                if (buffer.binary) return buffer.binary;\n                const uri = this.resolveURI(buffer.uri, dir);\n                return fetch(uri).then((res) => res.arrayBuffer());\n            })\n        );\n    }\n\n    static parseBufferViews(gl, desc, buffers) {\n        if (!desc.bufferViews) return null;\n        // Clone to leave description pure\n        const bufferViews = desc.bufferViews.map((o) => Object.assign({}, o));\n\n        desc.meshes &&\n            desc.meshes.forEach(({ primitives }) => {\n                primitives.forEach(({ attributes, indices }) => {\n                    // Flag bufferView as an attribute, so it knows to create a gl buffer\n                    for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n                    if (indices === undefined) return;\n                    bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n                    // Make sure indices bufferView have a target property for gl buffer binding\n                    bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n                });\n            });\n\n        // Get componentType of each bufferView from the accessors\n        desc.accessors.forEach(({ bufferView: i, componentType }) => {\n            bufferViews[i].componentType = componentType;\n        });\n\n        // Get mimetype of bufferView from images\n        desc.images &&\n            desc.images.forEach(({ uri, bufferView: i, mimeType }) => {\n                if (i === undefined) return;\n                bufferViews[i].mimeType = mimeType;\n            });\n\n        // Push each bufferView to the GPU as a separate buffer\n        bufferViews.forEach(\n            (\n                {\n                    buffer: bufferIndex, // required\n                    byteOffset = 0, // optional\n                    byteLength, // required\n                    byteStride, // optional\n                    target = gl.ARRAY_BUFFER, // optional, added above for elements\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n\n                    componentType, // optional, added from accessor above\n                    mimeType, // optional, added from images above\n                    isAttribute,\n                },\n                i\n            ) => {\n                const TypeArray = TYPE_ARRAY[componentType || mimeType];\n                const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n\n                const data = new TypeArray(buffers[bufferIndex], byteOffset, byteLength / elementBytes);\n                bufferViews[i].data = data;\n                bufferViews[i].originalBuffer = buffers[bufferIndex];\n\n                if (!isAttribute) return;\n                // Create gl buffers for the bufferView, pushing it to the GPU\n                const buffer = gl.createBuffer();\n                gl.bindBuffer(target, buffer);\n                gl.renderer.state.boundBuffer = buffer;\n                gl.bufferData(target, data, gl.STATIC_DRAW);\n                bufferViews[i].buffer = buffer;\n            }\n        );\n\n        return bufferViews;\n    }\n\n    static parseImages(gl, desc, dir, bufferViews) {\n        if (!desc.images) return null;\n        return desc.images.map(({ uri, bufferView: bufferViewIndex, mimeType, name }) => {\n            const image = new Image();\n            image.name = name;\n            if (uri) {\n                image.src = this.resolveURI(uri, dir);\n            } else if (bufferViewIndex !== undefined) {\n                const { data } = bufferViews[bufferViewIndex];\n                const blob = new Blob([data], { type: mimeType });\n                image.src = URL.createObjectURL(blob);\n            }\n            image.ready = new Promise((res) => {\n                image.onload = () => res();\n            });\n            return image;\n        });\n    }\n\n    static parseTextures(gl, desc, images) {\n        if (!desc.textures) return null;\n        return desc.textures.map(({ sampler: samplerIndex, source: sourceIndex, name, extensions, extras }) => {\n            const options = {\n                flipY: false,\n                wrapS: gl.REPEAT, // Repeat by default, opposed to OGL's clamp by default\n                wrapT: gl.REPEAT,\n            };\n            const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n            if (sampler) {\n                ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach((prop) => {\n                    if (sampler[prop]) options[prop] = sampler[prop];\n                });\n            }\n            const texture = new Texture(gl, options);\n            texture.name = name;\n            const image = images[sourceIndex];\n            image.ready.then(() => (texture.image = image));\n\n            return texture;\n        });\n    }\n\n    static parseMaterials(gl, desc, textures) {\n        if (!desc.materials) return null;\n        return desc.materials.map(\n            ({\n                name,\n                extensions,\n                extras,\n                pbrMetallicRoughness = {},\n                normalTexture,\n                occlusionTexture,\n                emissiveTexture,\n                emissiveFactor = [0, 0, 0],\n                alphaMode = 'OPAQUE',\n                alphaCutoff = 0.5,\n                doubleSided = false,\n            }) => {\n                const {\n                    baseColorFactor = [1, 1, 1, 1],\n                    baseColorTexture,\n                    metallicFactor = 1,\n                    roughnessFactor = 1,\n                    metallicRoughnessTexture,\n                    //   extensions,\n                    //   extras,\n                } = pbrMetallicRoughness;\n\n                if (baseColorTexture) {\n                    baseColorTexture.texture = textures[baseColorTexture.index];\n                    // texCoord\n                }\n                if (normalTexture) {\n                    normalTexture.texture = textures[normalTexture.index];\n                    // scale: 1\n                    // texCoord\n                }\n                if (metallicRoughnessTexture) {\n                    metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n                    // texCoord\n                }\n                if (occlusionTexture) {\n                    occlusionTexture.texture = textures[occlusionTexture.index];\n                    // strength 1\n                    // texCoord\n                }\n                if (emissiveTexture) {\n                    emissiveTexture.texture = textures[emissiveTexture.index];\n                    // texCoord\n                }\n\n                return {\n                    name,\n                    baseColorFactor,\n                    baseColorTexture,\n                    metallicFactor,\n                    roughnessFactor,\n                    metallicRoughnessTexture,\n                    normalTexture,\n                    occlusionTexture,\n                    emissiveTexture,\n                    emissiveFactor,\n                    alphaMode,\n                    alphaCutoff,\n                    doubleSided,\n                };\n            }\n        );\n    }\n\n    static parseSkins(gl, desc, bufferViews) {\n        if (!desc.skins) return null;\n        return desc.skins.map(\n            ({\n                inverseBindMatrices, // optional\n                skeleton, // optional\n                joints, // required\n                // name,\n                // extensions,\n                // extras,\n            }) => {\n                return {\n                    inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n                    skeleton,\n                    joints,\n                };\n            }\n        );\n    }\n\n    static parseMeshes(gl, desc, bufferViews, materials, skins) {\n        if (!desc.meshes) return null;\n        return desc.meshes.map(\n            (\n                {\n                    primitives, // required\n                    weights, // optional\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n                },\n                meshIndex\n            ) => {\n                // TODO: weights stuff ?\n                // Parse through nodes to see how many instances there are\n                // and if there is a skin attached\n                let numInstances = 0;\n                let skinIndex = false;\n                desc.nodes &&\n                    desc.nodes.forEach(({ mesh, skin }) => {\n                        if (mesh === meshIndex) {\n                            numInstances++;\n                            if (skin !== undefined) skinIndex = skin;\n                        }\n                    });\n\n                primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances).map(({ geometry, program, mode }) => {\n                    // Create either skinned mesh or regular mesh\n                    const mesh =\n                        typeof skinIndex === 'number'\n                            ? new GLTFSkin(gl, { skeleton: skins[skinIndex], geometry, program, mode })\n                            : new Mesh(gl, { geometry, program, mode });\n                    mesh.name = name;\n                    if (mesh.geometry.isInstanced) {\n                        // Tag mesh so that nodes can add their transforms to the instance attribute\n                        mesh.numInstances = numInstances;\n                        // Avoid incorrect culling for instances\n                        mesh.frustumCulled = false;\n                    }\n                    return mesh;\n                });\n\n                return {\n                    primitives,\n                    weights,\n                    name,\n                };\n            }\n        );\n    }\n\n    static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances) {\n        return primitives.map(\n            ({\n                attributes, // required\n                indices, // optional\n                material: materialIndex, // optional\n                mode = 4, // optional\n                targets, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const geometry = new Geometry(gl);\n\n                // Add each attribute found in primitive\n                for (let attr in attributes) {\n                    geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n                }\n\n                // Add index attribute if found\n                if (indices !== undefined) {\n                    geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n                }\n\n                // Add instanced transform attribute if multiple instances\n                if (numInstances > 1) {\n                    geometry.addAttribute('instanceMatrix', {\n                        instanced: 1,\n                        size: 16,\n                        data: new Float32Array(numInstances * 16),\n                    });\n                }\n\n                // TODO: materials\n                const program = new NormalProgram(gl);\n                if (materialIndex !== undefined) {\n                    program.gltfMaterial = materials[materialIndex];\n                }\n\n                return {\n                    geometry,\n                    program,\n                    mode,\n                };\n            }\n        );\n    }\n\n    static parseAccessor(index, desc, bufferViews) {\n        // TODO: init missing bufferView with 0s\n        // TODO: support sparse\n\n        const {\n            bufferView: bufferViewIndex, // optional\n            byteOffset = 0, // optional\n            componentType, // required\n            normalized = false, // optional\n            count, // required\n            type, // required\n            min, // optional\n            max, // optional\n            sparse, // optional\n            // name, // optional\n            // extensions, // optional\n            // extras, // optional\n        } = desc.accessors[index];\n\n        const {\n            data, // attached in parseBufferViews\n            originalBuffer, // attached in parseBufferViews\n            buffer, // replaced to be the actual GL buffer\n            byteOffset: bufferByteOffset = 0,\n            // byteLength, // applied in parseBufferViews\n            byteStride = 0,\n            target,\n            // name,\n            // extensions,\n            // extras,\n        } = bufferViews[bufferViewIndex];\n\n        const size = TYPE_SIZE[type];\n\n        // Parse data from joined buffers\n        const TypeArray = TYPE_ARRAY[componentType];\n        const elementBytes = data.BYTES_PER_ELEMENT;\n        const componentOffset = byteOffset / elementBytes;\n        const componentStride = byteStride / elementBytes;\n        const isInterleaved = !!byteStride && componentStride !== size;\n\n        // TODO: interleaved\n        const newData = isInterleaved ? data : new TypeArray(originalBuffer, byteOffset + bufferByteOffset, count * size);\n\n        // Return attribute data\n        return {\n            data: newData,\n            size,\n            type: componentType,\n            normalized,\n            buffer,\n            stride: byteStride,\n            offset: byteOffset,\n            count,\n            min,\n            max,\n        };\n    }\n\n    static parseNodes(gl, desc, meshes, skins) {\n        if (!desc.nodes) return null;\n        const nodes = desc.nodes.map(\n            ({\n                camera, // optional\n                children, // optional\n                skin: skinIndex, // optional\n                matrix, // optional\n                mesh: meshIndex, // optional\n                rotation, // optional\n                scale, // optional\n                translation, // optional\n                weights, // optional\n                name, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const node = new Transform();\n                if (name) node.name = name;\n\n                // Apply transformations\n                if (matrix) {\n                    node.matrix.copy(matrix);\n                    node.decompose();\n                } else {\n                    if (rotation) node.quaternion.copy(rotation);\n                    if (scale) node.scale.copy(scale);\n                    if (translation) node.position.copy(translation);\n                    node.updateMatrix();\n                }\n\n                // Flags for avoiding duplicate transforms and removing unused instance nodes\n                let isInstanced = false;\n                let isFirstInstance = true;\n\n                // add mesh if included\n                if (meshIndex !== undefined) {\n                    meshes[meshIndex].primitives.forEach((mesh) => {\n                        if (mesh.geometry.isInstanced) {\n                            isInstanced = true;\n                            if (!mesh.instanceCount) {\n                                mesh.instanceCount = 0;\n                            } else {\n                                isFirstInstance = false;\n                            }\n                            node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n                            mesh.instanceCount++;\n\n                            if (mesh.instanceCount === mesh.numInstances) {\n                                // Remove properties once all instances added\n                                delete mesh.numInstances;\n                                delete mesh.instanceCount;\n                                // Flag attribute as dirty\n                                mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n                            }\n                        }\n\n                        // For instances, only the first node will actually have the mesh\n                        if (isInstanced) {\n                            if (isFirstInstance) mesh.setParent(node);\n                        } else {\n                            mesh.setParent(node);\n                        }\n                    });\n                }\n\n                // Reset node if instanced to not duplicate transforms\n                if (isInstanced) {\n                    // Remove unused nodes just providing an instance transform\n                    if (!isFirstInstance) return null;\n                    // Avoid duplicate transform for node containing the instanced mesh\n                    node.matrix.identity();\n                    node.decompose();\n                }\n\n                return node;\n            }\n        );\n\n        desc.nodes.forEach(({ children = [] }, i) => {\n            // Set hierarchy now all nodes created\n            children.forEach((childIndex) => {\n                if (!nodes[childIndex]) return;\n                nodes[childIndex].setParent(nodes[i]);\n            });\n        });\n\n        return nodes;\n    }\n\n    static populateSkins(skins, nodes) {\n        if (!skins) return;\n        skins.forEach((skin) => {\n            skin.joints = skin.joints.map((i, index) => {\n                const joint = nodes[i];\n                joint.bindInverse = new Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n                return joint;\n            });\n            if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n        });\n    }\n\n    static parseAnimations(gl, desc, nodes, bufferViews) {\n        if (!desc.animations) return null;\n        return desc.animations.map(\n            ({\n                channels, // required\n                samplers, // required\n                name, // optional\n                // extensions, // optional\n                // extras,  // optional\n            }) => {\n                const data = channels.map(\n                    ({\n                        sampler: samplerIndex, // required\n                        target, // required\n                        // extensions, // optional\n                        // extras, // optional\n                    }) => {\n                        const {\n                            input: inputIndex, // required\n                            interpolation = 'LINEAR',\n                            output: outputIndex, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = samplers[samplerIndex];\n\n                        const {\n                            node: nodeIndex, // optional - TODO: when is it not included?\n                            path, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = target;\n\n                        const node = nodes[nodeIndex];\n                        const transform = TRANSFORMS[path];\n                        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n                        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n\n                        return {\n                            node,\n                            transform,\n                            interpolation,\n                            times,\n                            values,\n                        };\n                    }\n                );\n\n                return {\n                    name,\n                    animation: new GLTFAnimation(data),\n                };\n            }\n        );\n    }\n\n    static parseScenes(desc, nodes) {\n        if (!desc.scenes) return null;\n        return desc.scenes.map(\n            ({\n                nodes: nodesIndices = [],\n                name, // optional\n                extensions,\n                extras,\n            }) => {\n                return nodesIndices.reduce((map, i) => {\n                    // Don't add null nodes (instanced transforms)\n                    if (nodes[i]) map.push(nodes[i]);\n                    return map;\n                }, []);\n            }\n        );\n    }\n}\n","export function Text({\n    font,\n    text,\n    width = Infinity,\n    align = 'left',\n    size = 1,\n    letterSpacing = 0,\n    lineHeight = 1.4,\n    wordSpacing = 0,\n    wordBreak = false,\n}) {\n    const _this = this;\n    let glyphs, buffers;\n    let fontHeight, baseline, scale;\n\n    const newline = /\\n/;\n    const whitespace = /\\s/;\n\n    {\n        parseFont();\n        createGeometry();\n    }\n\n    function parseFont() {\n        glyphs = {};\n        font.chars.forEach((d) => (glyphs[d.char] = d));\n    }\n\n    function createGeometry() {\n        fontHeight = font.common.lineHeight;\n        baseline = font.common.base;\n\n        // Use baseline so that actual text height is as close to 'size' value as possible\n        scale = size / baseline;\n\n        // Strip spaces and newlines to get actual character length for buffers\n        let chars = text.replace(/[ \\n]/g, '');\n        let numChars = chars.length;\n\n        // Create output buffers\n        buffers = {\n            position: new Float32Array(numChars * 4 * 3),\n            uv: new Float32Array(numChars * 4 * 2),\n            id: new Float32Array(numChars * 4),\n            index: new Uint16Array(numChars * 6),\n        };\n\n        // Set values for buffers that don't require calculation\n        for (let i = 0; i < numChars; i++) {\n            buffers.id[i] = i;\n            buffers.index.set([i * 4, i * 4 + 2, i * 4 + 1, i * 4 + 1, i * 4 + 2, i * 4 + 3], i * 6);\n        }\n\n        layout();\n    }\n\n    function layout() {\n        const lines = [];\n\n        let cursor = 0;\n\n        let wordCursor = 0;\n        let wordWidth = 0;\n        let line = newLine();\n\n        function newLine() {\n            const line = {\n                width: 0,\n                glyphs: [],\n            };\n            lines.push(line);\n            wordCursor = cursor;\n            wordWidth = 0;\n            return line;\n        }\n\n        let maxTimes = 100;\n        let count = 0;\n        while (cursor < text.length && count < maxTimes) {\n            count++;\n\n            const char = text[cursor];\n\n            // Skip whitespace at start of line\n            if (!line.width && whitespace.test(char)) {\n                cursor++;\n                wordCursor = cursor;\n                wordWidth = 0;\n                continue;\n            }\n\n            // If newline char, skip to next line\n            if (newline.test(char)) {\n                cursor++;\n                line = newLine();\n                continue;\n            }\n\n            const glyph = glyphs[char] || glyphs[' '];\n\n            // Find any applicable kern pairs\n            if (line.glyphs.length) {\n                const prevGlyph = line.glyphs[line.glyphs.length - 1][0];\n                let kern = getKernPairOffset(glyph.id, prevGlyph.id) * scale;\n                line.width += kern;\n                wordWidth += kern;\n            }\n\n            // add char to line\n            line.glyphs.push([glyph, line.width]);\n\n            // calculate advance for next glyph\n            let advance = 0;\n\n            // If whitespace, update location of current word for line breaks\n            if (whitespace.test(char)) {\n                wordCursor = cursor;\n                wordWidth = 0;\n\n                // Add wordspacing\n                advance += wordSpacing * size;\n            } else {\n                // Add letterspacing\n                advance += letterSpacing * size;\n            }\n\n            advance += glyph.xadvance * scale;\n\n            line.width += advance;\n            wordWidth += advance;\n\n            // If width defined\n            if (line.width > width) {\n                // If can break words, undo latest glyph if line not empty and create new line\n                if (wordBreak && line.glyphs.length > 1) {\n                    line.width -= advance;\n                    line.glyphs.pop();\n                    line = newLine();\n                    continue;\n\n                    // If not first word, undo current word and cursor and create new line\n                } else if (!wordBreak && wordWidth !== line.width) {\n                    let numGlyphs = cursor - wordCursor + 1;\n                    line.glyphs.splice(-numGlyphs, numGlyphs);\n                    cursor = wordCursor;\n                    line.width -= wordWidth;\n                    line = newLine();\n                    continue;\n                }\n            }\n\n            cursor++;\n            // Reset infinite loop catch\n            count = 0;\n        }\n\n        // Remove last line if empty\n        if (!line.width) lines.pop();\n\n        populateBuffers(lines);\n    }\n\n    function populateBuffers(lines) {\n        const texW = font.common.scaleW;\n        const texH = font.common.scaleH;\n\n        // For all fonts tested, a little offset was needed to be right on the baseline, hence 0.07.\n        let y = 0.07 * size;\n        let j = 0;\n\n        for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n            let line = lines[lineIndex];\n\n            for (let i = 0; i < line.glyphs.length; i++) {\n                const glyph = line.glyphs[i][0];\n                let x = line.glyphs[i][1];\n\n                if (align === 'center') {\n                    x -= line.width * 0.5;\n                } else if (align === 'right') {\n                    x -= line.width;\n                }\n\n                // If space, don't add to geometry\n                if (whitespace.test(glyph.char)) continue;\n\n                // Apply char sprite offsets\n                x += glyph.xoffset * scale;\n                y -= glyph.yoffset * scale;\n\n                // each letter is a quad. axis bottom left\n                let w = glyph.width * scale;\n                let h = glyph.height * scale;\n                buffers.position.set([x, y - h, 0, x, y, 0, x + w, y - h, 0, x + w, y, 0], j * 4 * 3);\n\n                let u = glyph.x / texW;\n                let uw = glyph.width / texW;\n                let v = 1.0 - glyph.y / texH;\n                let vh = glyph.height / texH;\n                buffers.uv.set([u, v - vh, u, v, u + uw, v - vh, u + uw, v], j * 4 * 2);\n\n                // Reset cursor to baseline\n                y += glyph.yoffset * scale;\n\n                j++;\n            }\n\n            y -= size * lineHeight;\n        }\n\n        _this.buffers = buffers;\n        _this.numLines = lines.length;\n        _this.height = _this.numLines * size * lineHeight;\n        _this.width = Math.max(...lines.map((line) => line.width));\n    }\n\n    function getKernPairOffset(id1, id2) {\n        for (let i = 0; i < font.kernings.length; i++) {\n            let k = font.kernings[i];\n            if (k.first < id1) continue;\n            if (k.second < id2) continue;\n            if (k.first > id1) return 0;\n            if (k.first === id1 && k.second > id2) return 0;\n            return k.amount;\n        }\n        return 0;\n    }\n\n    // Update buffers to layout with new layout\n    this.resize = function (options) {\n        ({ width } = options);\n        layout();\n    };\n\n    // Completely change text (like creating new Text)\n    this.update = function (options) {\n        ({ text } = options);\n        createGeometry();\n    };\n}\n"],"names":["length","a","x","y","z","Math","sqrt","copy","out","set","add","b","subtract","scale","squaredLength","negate","inverse","normalize","len","dot","cross","ax","ay","az","bx","by","bz","tempA","tempB","angle","cosine","PI","acos","Vec3","this","v","Vec3Func","va","vb","mat4","m","w","q","qx","qy","qz","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","t","o","Array","tempVec3","ID","ATTR_ID","isBoundsWarned","Geometry","gl","attributes","key","canvas","console","error","id","VAOs","drawRange","start","count","instancedCount","renderer","bindVertexArray","currentGeometry","glState","state","addAttribute","attr","size","type","data","constructor","Float32Array","FLOAT","Uint16Array","UNSIGNED_SHORT","UNSIGNED_INT","target","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","normalized","stride","offset","byteLength","divisor","instanced","needsUpdate","buffer","createBuffer","updateAttribute","isInstanced","warn","min","index","max","boundBuffer","bindBuffer","bufferData","STATIC_DRAW","value","program","attributeOrder","createVertexArray","bindAttributes","attributeLocations","forEach","location","name","_this","numLoc","i","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","mode","TRIANGLES","createVAO","_this2","drawElementsInstanced","drawArraysInstanced","drawElements","drawArrays","position","getPosition","array","bounds","center","radius","Infinity","l","sub","divide","computeBoundingBox","maxRadiusSq","fromArray","squaredDistance","deleteVertexArray","deleteBuffer","arrayCacheF32","Program","vertex","fragment","uniforms","transparent","cullFace","BACK","frontFace","CCW","depthTest","depthWrite","depthFunc","LESS","blendFunc","blendEquation","src","premultipliedAlpha","setBlendFunc","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","uniformLocations","Map","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","getUniformLocation","split","match","uniformName","isStructArray","structIndex","Number","structProperty","isNaN","isStruct","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","getAttribLocation","join","dst","srcAlpha","dstAlpha","modeRGB","modeAlpha","enable","DEPTH_TEST","disable","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthMask","setDepthFunc","setBlendEquation","flipFaces","textureUnit","programActive","currentProgram","useProgram","activeUniform","undefined","texture","update","setUniform","textureUnits","push","applyState","CW","deleteProgram","arrayLen","valueLen","flatten","setValue","get","slice","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","warnCount","message","Renderer","document","createElement","width","height","dpr","alpha","depth","stencil","antialias","preserveDrawingBuffer","powerPreference","autoClear","webgl","color","getContext","isWebgl2","setSize","ZERO","FUNC_ADD","depthMask","premultiplyAlpha","flipY","unpackAlignment","framebuffer","viewport","activeTextureUnit","extensions","getExtension","drawBuffers","parameters","maxTextureUnits","getParameter","MAX_COMBINED_TEXTURE_IMAGE_UNITS","maxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","Object","assign","style","blendFuncSeparate","blendEquationSeparate","activeTexture","TEXTURE0","FRAMEBUFFER","bindFramebuffer","extension","webgl2Func","extFunc","bind","renderOrder","zDepth","scene","camera","frustumCull","sort","renderList","updateFrustum","traverse","node","visible","draw","frustumCulled","frustumIntersectsMesh","opaque","ui","worldMatrix","getTranslation","applyMatrix4","projectionViewMatrix","sortOpaque","sortTransparent","sortUI","concat","clear","setViewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","updateMatrixWorld","getRenderList","multiply","aw","bw","invert","a0","a1","a2","a3","invDot","conjugate","vec4","Quat","onChange","QuatFunc","rad","sin","cos","qA","qB","matrix3","fRoot","fTrace","j","k","euler","order","sx","cx","sy","cy","sz","cz","axis","s","omega","cosom","sinom","scale0","scale1","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","b0","b1","b2","b3","translate","rotate","c","b12","b20","b21","b22","hypot","abs","getScaling","mat","m11","m12","m13","m21","m22","m23","m31","m32","m33","temp","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","perspective","fovy","aspect","near","far","f","tan","nf","Mat4","m00","m01","m02","m03","m10","m20","m30","Mat4Func","ma","mb","fov","left","right","bottom","top","lr","bt","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","pos","xy","xz","yz","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","fromRotationMatrix","asin","atan2","tmpMat4","Euler","EulerFunc","fromQuaternion","Transform","parent","children","matrix","matrixAutoUpdate","quaternion","rotation","fromEuler","notifyParent","removeChild","addChild","child","notifyChild","indexOf","setParent","splice","force","updateMatrix","worldMatrixNeedsUpdate","compose","callback","lookAt","tempMat4","tempVec3a","tempVec3b","Camera","zoom","projectionMatrix","viewMatrix","worldPosition","orthographic","fromPerspective","fromOrthogonal","frustum","constant","invLen","distance","geometry","computeBoundingSphere","getMaxScaleOnAxis","frustumIntersectsSphere","normal","plane","Mat3","Mat3Func","vec3a","vec3b","vec3c","Mesh","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","mesh","modelMatrix","cameraPosition","getNormalMatrix","determinant","use","emptyPixel","Uint8Array","isPowerOf2","Texture","image","TEXTURE_2D","UNSIGNED_BYTE","format","RGBA","internalFormat","wrapS","CLAMP_TO_EDGE","wrapT","generateMipmaps","minFilter","NEAREST_MIPMAP_LINEAR","LINEAR","magFilter","anisotropy","level","createTexture","store","REPEAT","bindTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_CUBE_MAP","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","ArrayBuffer","isView","isCompressedTexture","compressedTexImage2D","generateMipmap","onUpdate","RenderTarget","depthTexture","createFramebuffer","textures","framebufferTexture2D","COLOR_ATTACHMENT0","NEAREST","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","stencilBuffer","STENCIL_INDEX8","STENCIL_ATTACHMENT","depthStencilBuffer","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","NAMES","black","white","red","green","blue","fuchsia","cyan","yellow","orange","hexToRGB","hex","rgb","exec","parseInt","numberToRGB","num","parseColor","arguments","toLowerCase","Color","isArray","ColorFunc","Vec2","Vec2Func","mat3","Vec4","Vec4Func","Plane","widthSegments","heightSegments","wSegs","hSegs","numIndices","uv","Uint32Array","buildPlane","u","uDir","vDir","ii","io","segW","segH","iy","ix","d","Box","depthSegments","dSegs","Sphere","ceil","phiStart","phiLength","thetaStart","thetaLength","pStart","pLength","tStart","tLength","iv","te","grid","n","vRow","Cylinder","radiusTop","radiusBottom","radialSegments","openEnded","rSegs","numCaps","indexArray","addHeight","slope","indexRow","r","theta","sinTheta","cosTheta","addCap","isTop","sign","centerIndex","Triangle","Torus","tube","tubularSegments","arc","vertices","normals","uvs","indices","idx","STATE","tempVec2a","tempVec2b","tempVec2c","tempVec3c","tempVec3d","tempVec3e","tempVec3f","tempVec3g","tempVec3h","tempVec3i","tempVec3j","tempVec3k","Raycast","origin","direction","mouse","unproject","meshes","maxDistance","output","invWorldMat4","hits","localMaxDistance","scaleRotateMatrix4","transformDirection","localDistance","raycast","intersectSphere","intersectBox","hit","localPoint","point","includeUV","includeNormal","intersectBounds","closestFaceNormal","faceNormal","barycoord","uvA","uvB","uvC","closestA","closestB","closestC","end","ai","bi","ci","intersectTriangle","localFaceNormal","localNormal","getBarycoord","sphere","ray","tca","d2","radius2","thc","t0","t1","box","tmin","tmax","tYmin","tYmax","tZmin","tZmax","invdirx","invdiry","invdirz","backfaceCulling","edge1","edge2","diff","DdN","DdQxE2","DdE1xQ","QdN","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","denom","invDenom","CATMULLROM","CUBICBEZIER","QUADRATICBEZIER","_a0","_a1","_a2","_a3","getCtrlPoint","points","last","clone","getQuadraticBezierPoint","p0","c0","p1","ret","getCubicBezierPoint","c1","Curve","divisions","p","pop","getPoints","_getQuadraticBezierPoints","_getCubicBezierPoints","_getCatmullRomPoints","Post","targetOnly","options","passes","fbo","read","write","swap","resize","defaultVertex","defaultFragment","textureUniform","enabled","pass","floor","enabledPasses","filter","render","prevPos","prevRot","prevScl","nextPos","nextRot","nextScl","Animation","objects","elapsed","weight","duration","frames","totalWeight","isSet","floorFrame","blend","prevKey","nextKey","object","lerp","slerp","Skin","rig","createBones","createBoneTexture","animations","boneTexture","boneTextureSize","root","bones","bone","bindPose","bindInverse","_construct","pow","log","LN2","boneMatrices","RGBA32F","animation","total","_this3","NormalProgram","Flowmap","falloff","dissipation","createFBOs","HALF_FLOAT","HALF_FLOAT_OES","RGBA16F","mask","initProgram","tMap","uFalloff","uAlpha","uDissipation","uAspect","uMouse","uVelocity","velocity","GPGPU","initialData","dataLength","coords","floatArray","tmp","Polyline","prev","next","side","ind","updateGeometry","uResolution","resolution","uDPR","uThickness","thickness","uColor","uMiter","miter","toArray","Shadow","light","depthProgram","castMeshes","receive","cast","uniformProjection","uniformView","uniformTexture","colorProgram","isForceVisibility","KTXTexture","parseBuffer","ktx","KhronosTextureContainer","mipmaps","glInternalFormat","numberOfMipmapLevels","idCheck","BYTES_PER_ELEMENT","head","DataView","littleEndian","getUint32","numberOfFaces","bytesOfKeyValueData","levelSize","Int32Array","face","cache","supportedExtensions","TextureLoader","support","getSupportedExtensions","ext","_typeof","prop","includes","cacheID","loaded","loadKTX","loadImage","pvrtc","s3tc","etc1","astc","bc7","toDataURL","fetch","then","res","arrayBuffer","Promise","resolve","isChrome","navigator","userAgent","window","createImageBitmap","blob","imageOrientation","img","Image","crossOrigin","onload","decodeImage","imgBmp","powerOfTwo","close","log2","tmpVec3A","tmpVec3B","tmpVec3C","tmpVec3D","tmpQuatA","tmpQuatB","tmpQuatC","tmpQuatD","GLTFAnimation","loop","startTime","reduce","times","endTime","transform","interpolation","values","prevIndex","findIndex","nextIndex","prevVal","prevTan","nextTan","nextVal","cubicSplineInterpolate","t2","t3","s2","s3","s0","s1","identity","GLTFSkin","skeleton","joints","updateUniforms","_worldMatrix","TYPE_ARRAY","Int16Array","TYPE_SIZE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","ATTRIBUTES","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","TRANSFORMS","translation","GLTFLoader","dir","parseDesc","desc","parse","asset","version","loadBuffers","buffers","bufferViews","parseBufferViews","images","parseImages","parseTextures","materials","parseMaterials","skins","parseSkins","parseMeshes","nodes","parseNodes","populateSkins","parseAnimations","scenes","parseScenes","json","glb","unpackGLB","header","Error","jsonChunkHeader","jsonByteLength","jsonText","TextDecoder","decode","JSON","binaryChunkHeader","binaryByteOffset","binaryByteLength","binary","uri","test","replace","all","map","resolveURI","primitives","accessors","bufferView","isAttribute","componentType","mimeType","bufferIndex","byteOffset","byteStride","extras","TypeArray","elementBytes","originalBuffer","bufferViewIndex","Blob","URL","createObjectURL","ready","samplerIndex","sampler","sourceIndex","source","samplers","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","inverseBindMatrices","_this4","parseAccessor","meshIndex","weights","numInstances","skinIndex","skin","_this5","parsePrimitives","materialIndex","material","targets","_this6","gltfMaterial","sparse","bufferByteOffset","decompose","isFirstInstance","instanceCount","instanceMatrix","childIndex","joint","channels","inputIndex","input","outputIndex","nodeIndex","path","_this7","nodesIndices","element","ease","inertia","enableRotate","rotateSpeed","autoRotate","autoRotateSpeed","enableZoom","zoomSpeed","zoomStyle","enablePan","panSpeed","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","minDistance","sphericalDelta","phi","sphericalTarget","spherical","panDelta","handleAutoRotate","sinPhiRadius","forcePosition","rotateStart","panStart","dollyStart","getZoomScale","panLeft","panUp","mouseButtons","ORBIT","ZOOM","PAN","pan","deltaX","deltaY","el","body","targetDistance","clientHeight","dolly","dollyScale","handleMoveRotate","handleMouseMoveDolly","e","clientX","clientY","handleMovePan","handleTouchStartDollyPan","dx","touches","pageX","dy","pageY","handleTouchMoveDollyPan","onMouseDown","button","addEventListener","onMouseMove","onMouseUp","removeEventListener","onMouseWheel","stopPropagation","preventDefault","onTouchStart","onTouchMove","onTouchEnd","onContextMenu","addHandlers","passive","remove","glyphs","baseline","font","text","align","letterSpacing","lineHeight","wordSpacing","wordBreak","newline","whitespace","createGeometry","common","base","numChars","layout","cursor","wordCursor","wordWidth","line","newLine","char","glyph","prevGlyph","kern","getKernPairOffset","advance","xadvance","numGlyphs","texW","scaleW","texH","scaleH","lineIndex","xoffset","yoffset","h","uw","vh","numLines","populateBuffers","id1","id2","kernings","first","second","amount","chars"],"mappings":"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"}